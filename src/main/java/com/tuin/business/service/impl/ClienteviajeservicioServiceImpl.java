/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Clienteviajeservicio;
import com.tuin.bean.jpa.ClienteviajeservicioEntity;
import java.math.BigDecimal;
import com.tuin.business.service.ClienteviajeservicioService;
import com.tuin.business.service.mapping.ClienteviajeservicioServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.ClienteviajeservicioPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ClienteviajeservicioService
 */
@Component
public class ClienteviajeservicioServiceImpl implements ClienteviajeservicioService {

	private ClienteviajeservicioPersistence clienteviajeservicioPersistence;

	@Resource
	private ClienteviajeservicioServiceMapper clienteviajeservicioServiceMapper;
	
	public ClienteviajeservicioServiceImpl() {
		clienteviajeservicioPersistence = PersistenceServiceProvider.getService(ClienteviajeservicioPersistence.class);
	}
		
	@Override
	public Clienteviajeservicio findById(Long id) {
		ClienteviajeservicioEntity entity = clienteviajeservicioPersistence.load(id);
		return clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(entity);
	}

	@Override
	public List<Clienteviajeservicio> findAll() {
		List<ClienteviajeservicioEntity> entities = clienteviajeservicioPersistence.loadAll();
		List<Clienteviajeservicio> beans = new ArrayList<Clienteviajeservicio>();
		for(ClienteviajeservicioEntity entity : entities) {
			beans.add(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(entity));
		}
		return beans;
	}

	@Override
	public Clienteviajeservicio save(Clienteviajeservicio clienteviajeservicio) {
		return update(clienteviajeservicio) ;
	}

	@Override
	public Clienteviajeservicio create(Clienteviajeservicio clienteviajeservicio) {
		if(clienteviajeservicioPersistence.load(clienteviajeservicio.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ClienteviajeservicioEntity clienteviajeservicioEntity = new ClienteviajeservicioEntity();
		clienteviajeservicioServiceMapper.mapClienteviajeservicioToClienteviajeservicioEntity(clienteviajeservicio, clienteviajeservicioEntity);
		ClienteviajeservicioEntity clienteviajeservicioEntitySaved = clienteviajeservicioPersistence.save(clienteviajeservicioEntity);
		return clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntitySaved);
	}

	@Override
	public Clienteviajeservicio update(Clienteviajeservicio clienteviajeservicio) {
		ClienteviajeservicioEntity clienteviajeservicioEntity = clienteviajeservicioPersistence.load(clienteviajeservicio.getId());
		clienteviajeservicioServiceMapper.mapClienteviajeservicioToClienteviajeservicioEntity(clienteviajeservicio, clienteviajeservicioEntity);
		ClienteviajeservicioEntity clienteviajeservicioEntitySaved = clienteviajeservicioPersistence.save(clienteviajeservicioEntity);
		return clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntitySaved);
	}

	@Override
	public void delete(Long id) {
		clienteviajeservicioPersistence.delete(id);
	}

	public ClienteviajeservicioPersistence getClienteviajeservicioPersistence() {
		return clienteviajeservicioPersistence;
	}

	public void setClienteviajeservicioPersistence(ClienteviajeservicioPersistence clienteviajeservicioPersistence) {
		this.clienteviajeservicioPersistence = clienteviajeservicioPersistence;
	}

	public ClienteviajeservicioServiceMapper getClienteviajeservicioServiceMapper() {
		return clienteviajeservicioServiceMapper;
	}

	public void setClienteviajeservicioServiceMapper(ClienteviajeservicioServiceMapper clienteviajeservicioServiceMapper) {
		this.clienteviajeservicioServiceMapper = clienteviajeservicioServiceMapper;
	}

}
