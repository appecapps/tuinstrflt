/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Color;
import com.tuin.bean.jpa.ColorEntity;
import java.util.List;
import com.tuin.business.service.ColorService;
import com.tuin.business.service.mapping.ColorServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.ColorPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ColorService
 */
@Component
public class ColorServiceImpl implements ColorService {

	private ColorPersistence colorPersistence;

	@Resource
	private ColorServiceMapper colorServiceMapper;
	
	public ColorServiceImpl() {
		colorPersistence = PersistenceServiceProvider.getService(ColorPersistence.class);
	}
		
	@Override
	public Color findById(Long id) {
		ColorEntity entity = colorPersistence.load(id);
		return colorServiceMapper.mapColorEntityToColor(entity);
	}

	@Override
	public List<Color> findAll() {
		List<ColorEntity> entities = colorPersistence.loadAll();
		List<Color> beans = new ArrayList<Color>();
		for(ColorEntity entity : entities) {
			beans.add(colorServiceMapper.mapColorEntityToColor(entity));
		}
		return beans;
	}

	@Override
	public Color save(Color color) {
		return update(color) ;
	}

	@Override
	public Color create(Color color) {
		if(colorPersistence.load(color.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ColorEntity colorEntity = new ColorEntity();
		colorServiceMapper.mapColorToColorEntity(color, colorEntity);
		ColorEntity colorEntitySaved = colorPersistence.save(colorEntity);
		return colorServiceMapper.mapColorEntityToColor(colorEntitySaved);
	}

	@Override
	public Color update(Color color) {
		ColorEntity colorEntity = colorPersistence.load(color.getId());
		colorServiceMapper.mapColorToColorEntity(color, colorEntity);
		ColorEntity colorEntitySaved = colorPersistence.save(colorEntity);
		return colorServiceMapper.mapColorEntityToColor(colorEntitySaved);
	}

	@Override
	public void delete(Long id) {
		colorPersistence.delete(id);
	}

	public ColorPersistence getColorPersistence() {
		return colorPersistence;
	}

	public void setColorPersistence(ColorPersistence colorPersistence) {
		this.colorPersistence = colorPersistence;
	}

	public ColorServiceMapper getColorServiceMapper() {
		return colorServiceMapper;
	}

	public void setColorServiceMapper(ColorServiceMapper colorServiceMapper) {
		this.colorServiceMapper = colorServiceMapper;
	}

}
