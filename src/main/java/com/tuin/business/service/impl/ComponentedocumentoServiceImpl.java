/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Componentedocumento;
import com.tuin.bean.jpa.ComponentedocumentoEntity;
import java.math.BigDecimal;
import com.tuin.business.service.ComponentedocumentoService;
import com.tuin.business.service.mapping.ComponentedocumentoServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.ComponentedocumentoPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ComponentedocumentoService
 */
@Component
public class ComponentedocumentoServiceImpl implements ComponentedocumentoService {

	private ComponentedocumentoPersistence componentedocumentoPersistence;

	@Resource
	private ComponentedocumentoServiceMapper componentedocumentoServiceMapper;
	
	public ComponentedocumentoServiceImpl() {
		componentedocumentoPersistence = PersistenceServiceProvider.getService(ComponentedocumentoPersistence.class);
	}
		
	@Override
	public Componentedocumento findById(Long id) {
		ComponentedocumentoEntity entity = componentedocumentoPersistence.load(id);
		return componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(entity);
	}

	@Override
	public List<Componentedocumento> findAll() {
		List<ComponentedocumentoEntity> entities = componentedocumentoPersistence.loadAll();
		List<Componentedocumento> beans = new ArrayList<Componentedocumento>();
		for(ComponentedocumentoEntity entity : entities) {
			beans.add(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(entity));
		}
		return beans;
	}

	@Override
	public Componentedocumento save(Componentedocumento componentedocumento) {
		return update(componentedocumento) ;
	}

	@Override
	public Componentedocumento create(Componentedocumento componentedocumento) {
		if(componentedocumentoPersistence.load(componentedocumento.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ComponentedocumentoEntity componentedocumentoEntity = new ComponentedocumentoEntity();
		componentedocumentoServiceMapper.mapComponentedocumentoToComponentedocumentoEntity(componentedocumento, componentedocumentoEntity);
		ComponentedocumentoEntity componentedocumentoEntitySaved = componentedocumentoPersistence.save(componentedocumentoEntity);
		return componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntitySaved);
	}

	@Override
	public Componentedocumento update(Componentedocumento componentedocumento) {
		ComponentedocumentoEntity componentedocumentoEntity = componentedocumentoPersistence.load(componentedocumento.getId());
		componentedocumentoServiceMapper.mapComponentedocumentoToComponentedocumentoEntity(componentedocumento, componentedocumentoEntity);
		ComponentedocumentoEntity componentedocumentoEntitySaved = componentedocumentoPersistence.save(componentedocumentoEntity);
		return componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntitySaved);
	}

	@Override
	public void delete(Long id) {
		componentedocumentoPersistence.delete(id);
	}

	public ComponentedocumentoPersistence getComponentedocumentoPersistence() {
		return componentedocumentoPersistence;
	}

	public void setComponentedocumentoPersistence(ComponentedocumentoPersistence componentedocumentoPersistence) {
		this.componentedocumentoPersistence = componentedocumentoPersistence;
	}

	public ComponentedocumentoServiceMapper getComponentedocumentoServiceMapper() {
		return componentedocumentoServiceMapper;
	}

	public void setComponentedocumentoServiceMapper(ComponentedocumentoServiceMapper componentedocumentoServiceMapper) {
		this.componentedocumentoServiceMapper = componentedocumentoServiceMapper;
	}

}
