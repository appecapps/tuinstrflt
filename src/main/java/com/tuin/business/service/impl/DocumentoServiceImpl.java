/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Documento;
import com.tuin.bean.jpa.DocumentoEntity;
import java.math.BigDecimal;
import java.util.List;
import com.tuin.business.service.DocumentoService;
import com.tuin.business.service.mapping.DocumentoServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.DocumentoPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DocumentoService
 */
@Component
public class DocumentoServiceImpl implements DocumentoService {

	private DocumentoPersistence documentoPersistence;

	@Resource
	private DocumentoServiceMapper documentoServiceMapper;
	
	public DocumentoServiceImpl() {
		documentoPersistence = PersistenceServiceProvider.getService(DocumentoPersistence.class);
	}
		
	@Override
	public Documento findById(Long id) {
		DocumentoEntity entity = documentoPersistence.load(id);
		return documentoServiceMapper.mapDocumentoEntityToDocumento(entity);
	}

	@Override
	public List<Documento> findAll() {
		List<DocumentoEntity> entities = documentoPersistence.loadAll();
		List<Documento> beans = new ArrayList<Documento>();
		for(DocumentoEntity entity : entities) {
			beans.add(documentoServiceMapper.mapDocumentoEntityToDocumento(entity));
		}
		return beans;
	}

	@Override
	public Documento save(Documento documento) {
		return update(documento) ;
	}

	@Override
	public Documento create(Documento documento) {
		if(documentoPersistence.load(documento.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DocumentoEntity documentoEntity = new DocumentoEntity();
		documentoServiceMapper.mapDocumentoToDocumentoEntity(documento, documentoEntity);
		DocumentoEntity documentoEntitySaved = documentoPersistence.save(documentoEntity);
		return documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntitySaved);
	}

	@Override
	public Documento update(Documento documento) {
		DocumentoEntity documentoEntity = documentoPersistence.load(documento.getId());
		documentoServiceMapper.mapDocumentoToDocumentoEntity(documento, documentoEntity);
		DocumentoEntity documentoEntitySaved = documentoPersistence.save(documentoEntity);
		return documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntitySaved);
	}

	@Override
	public void delete(Long id) {
		documentoPersistence.delete(id);
	}

	public DocumentoPersistence getDocumentoPersistence() {
		return documentoPersistence;
	}

	public void setDocumentoPersistence(DocumentoPersistence documentoPersistence) {
		this.documentoPersistence = documentoPersistence;
	}

	public DocumentoServiceMapper getDocumentoServiceMapper() {
		return documentoServiceMapper;
	}

	public void setDocumentoServiceMapper(DocumentoServiceMapper documentoServiceMapper) {
		this.documentoServiceMapper = documentoServiceMapper;
	}

}
