/*
 * Created on 28 ago 2017 ( Time 17:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Facturaelectronica;
import com.tuin.bean.jpa.FacturaelectronicaEntity;
import java.util.Date;
import com.tuin.business.service.FacturaelectronicaService;
import com.tuin.business.service.mapping.FacturaelectronicaServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.FacturaelectronicaPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of FacturaelectronicaService
 */
@Component
public class FacturaelectronicaServiceImpl implements FacturaelectronicaService {

	private FacturaelectronicaPersistence facturaelectronicaPersistence;

	@Resource
	private FacturaelectronicaServiceMapper facturaelectronicaServiceMapper;
	
	public FacturaelectronicaServiceImpl() {
		facturaelectronicaPersistence = PersistenceServiceProvider.getService(FacturaelectronicaPersistence.class);
	}
		
	@Override
	public Facturaelectronica findById(Long id) {
		FacturaelectronicaEntity entity = facturaelectronicaPersistence.load(id);
		return facturaelectronicaServiceMapper.mapFacturaelectronicaEntityToFacturaelectronica(entity);
	}

	@Override
	public List<Facturaelectronica> findAll() {
		List<FacturaelectronicaEntity> entities = facturaelectronicaPersistence.loadAll();
		List<Facturaelectronica> beans = new ArrayList<Facturaelectronica>();
		for(FacturaelectronicaEntity entity : entities) {
			beans.add(facturaelectronicaServiceMapper.mapFacturaelectronicaEntityToFacturaelectronica(entity));
		}
		return beans;
	}

	@Override
	public Facturaelectronica save(Facturaelectronica facturaelectronica) {
		return update(facturaelectronica) ;
	}

	@Override
	public Facturaelectronica create(Facturaelectronica facturaelectronica) {
		if(facturaelectronicaPersistence.load(facturaelectronica.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		FacturaelectronicaEntity facturaelectronicaEntity = new FacturaelectronicaEntity();
		facturaelectronicaServiceMapper.mapFacturaelectronicaToFacturaelectronicaEntity(facturaelectronica, facturaelectronicaEntity);
		FacturaelectronicaEntity facturaelectronicaEntitySaved = facturaelectronicaPersistence.save(facturaelectronicaEntity);
		return facturaelectronicaServiceMapper.mapFacturaelectronicaEntityToFacturaelectronica(facturaelectronicaEntitySaved);
	}

	@Override
	public Facturaelectronica update(Facturaelectronica facturaelectronica) {
		FacturaelectronicaEntity facturaelectronicaEntity = facturaelectronicaPersistence.load(facturaelectronica.getId());
		facturaelectronicaServiceMapper.mapFacturaelectronicaToFacturaelectronicaEntity(facturaelectronica, facturaelectronicaEntity);
		FacturaelectronicaEntity facturaelectronicaEntitySaved = facturaelectronicaPersistence.save(facturaelectronicaEntity);
		return facturaelectronicaServiceMapper.mapFacturaelectronicaEntityToFacturaelectronica(facturaelectronicaEntitySaved);
	}

	@Override
	public void delete(Long id) {
		facturaelectronicaPersistence.delete(id);
	}

	public FacturaelectronicaPersistence getFacturaelectronicaPersistence() {
		return facturaelectronicaPersistence;
	}

	public void setFacturaelectronicaPersistence(FacturaelectronicaPersistence facturaelectronicaPersistence) {
		this.facturaelectronicaPersistence = facturaelectronicaPersistence;
	}

	public FacturaelectronicaServiceMapper getFacturaelectronicaServiceMapper() {
		return facturaelectronicaServiceMapper;
	}

	public void setFacturaelectronicaServiceMapper(FacturaelectronicaServiceMapper facturaelectronicaServiceMapper) {
		this.facturaelectronicaServiceMapper = facturaelectronicaServiceMapper;
	}

}
