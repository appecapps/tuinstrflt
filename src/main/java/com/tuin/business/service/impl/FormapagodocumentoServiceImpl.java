/*
 * Created on 28 ago 2017 ( Time 17:51:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Formapagodocumento;
import com.tuin.bean.jpa.FormapagodocumentoEntity;
import com.tuin.business.service.FormapagodocumentoService;
import com.tuin.business.service.mapping.FormapagodocumentoServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.FormapagodocumentoPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of FormapagodocumentoService
 */
@Component
public class FormapagodocumentoServiceImpl implements FormapagodocumentoService {

	private FormapagodocumentoPersistence formapagodocumentoPersistence;

	@Resource
	private FormapagodocumentoServiceMapper formapagodocumentoServiceMapper;
	
	public FormapagodocumentoServiceImpl() {
		formapagodocumentoPersistence = PersistenceServiceProvider.getService(FormapagodocumentoPersistence.class);
	}
		
	@Override
	public Formapagodocumento findById(Long id) {
		FormapagodocumentoEntity entity = formapagodocumentoPersistence.load(id);
		return formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(entity);
	}

	@Override
	public List<Formapagodocumento> findAll() {
		List<FormapagodocumentoEntity> entities = formapagodocumentoPersistence.loadAll();
		List<Formapagodocumento> beans = new ArrayList<Formapagodocumento>();
		for(FormapagodocumentoEntity entity : entities) {
			beans.add(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(entity));
		}
		return beans;
	}

	@Override
	public Formapagodocumento save(Formapagodocumento formapagodocumento) {
		return update(formapagodocumento) ;
	}

	@Override
	public Formapagodocumento create(Formapagodocumento formapagodocumento) {
		if(formapagodocumentoPersistence.load(formapagodocumento.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		FormapagodocumentoEntity formapagodocumentoEntity = new FormapagodocumentoEntity();
		formapagodocumentoServiceMapper.mapFormapagodocumentoToFormapagodocumentoEntity(formapagodocumento, formapagodocumentoEntity);
		FormapagodocumentoEntity formapagodocumentoEntitySaved = formapagodocumentoPersistence.save(formapagodocumentoEntity);
		return formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntitySaved);
	}

	@Override
	public Formapagodocumento update(Formapagodocumento formapagodocumento) {
		FormapagodocumentoEntity formapagodocumentoEntity = formapagodocumentoPersistence.load(formapagodocumento.getId());
		formapagodocumentoServiceMapper.mapFormapagodocumentoToFormapagodocumentoEntity(formapagodocumento, formapagodocumentoEntity);
		FormapagodocumentoEntity formapagodocumentoEntitySaved = formapagodocumentoPersistence.save(formapagodocumentoEntity);
		return formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntitySaved);
	}

	@Override
	public void delete(Long id) {
		formapagodocumentoPersistence.delete(id);
	}

	public FormapagodocumentoPersistence getFormapagodocumentoPersistence() {
		return formapagodocumentoPersistence;
	}

	public void setFormapagodocumentoPersistence(FormapagodocumentoPersistence formapagodocumentoPersistence) {
		this.formapagodocumentoPersistence = formapagodocumentoPersistence;
	}

	public FormapagodocumentoServiceMapper getFormapagodocumentoServiceMapper() {
		return formapagodocumentoServiceMapper;
	}

	public void setFormapagodocumentoServiceMapper(FormapagodocumentoServiceMapper formapagodocumentoServiceMapper) {
		this.formapagodocumentoServiceMapper = formapagodocumentoServiceMapper;
	}

}
