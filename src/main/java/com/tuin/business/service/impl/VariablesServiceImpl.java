/*
 * Created on 28 ago 2017 ( Time 17:51:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Variables;
import com.tuin.bean.jpa.VariablesEntity;
import com.tuin.business.service.VariablesService;
import com.tuin.business.service.mapping.VariablesServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.VariablesPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of VariablesService
 */
@Component
public class VariablesServiceImpl implements VariablesService {

	private VariablesPersistence variablesPersistence;

	@Resource
	private VariablesServiceMapper variablesServiceMapper;
	
	public VariablesServiceImpl() {
		variablesPersistence = PersistenceServiceProvider.getService(VariablesPersistence.class);
	}
		
	@Override
	public Variables findById(Long id) {
		VariablesEntity entity = variablesPersistence.load(id);
		return variablesServiceMapper.mapVariablesEntityToVariables(entity);
	}

	@Override
	public List<Variables> findAll() {
		List<VariablesEntity> entities = variablesPersistence.loadAll();
		List<Variables> beans = new ArrayList<Variables>();
		for(VariablesEntity entity : entities) {
			beans.add(variablesServiceMapper.mapVariablesEntityToVariables(entity));
		}
		return beans;
	}

	@Override
	public Variables save(Variables variables) {
		return update(variables) ;
	}

	@Override
	public Variables create(Variables variables) {
		if(variablesPersistence.load(variables.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		VariablesEntity variablesEntity = new VariablesEntity();
		variablesServiceMapper.mapVariablesToVariablesEntity(variables, variablesEntity);
		VariablesEntity variablesEntitySaved = variablesPersistence.save(variablesEntity);
		return variablesServiceMapper.mapVariablesEntityToVariables(variablesEntitySaved);
	}

	@Override
	public Variables update(Variables variables) {
		VariablesEntity variablesEntity = variablesPersistence.load(variables.getId());
		variablesServiceMapper.mapVariablesToVariablesEntity(variables, variablesEntity);
		VariablesEntity variablesEntitySaved = variablesPersistence.save(variablesEntity);
		return variablesServiceMapper.mapVariablesEntityToVariables(variablesEntitySaved);
	}

	@Override
	public void delete(Long id) {
		variablesPersistence.delete(id);
	}

	public VariablesPersistence getVariablesPersistence() {
		return variablesPersistence;
	}

	public void setVariablesPersistence(VariablesPersistence variablesPersistence) {
		this.variablesPersistence = variablesPersistence;
	}

	public VariablesServiceMapper getVariablesServiceMapper() {
		return variablesServiceMapper;
	}

	public void setVariablesServiceMapper(VariablesServiceMapper variablesServiceMapper) {
		this.variablesServiceMapper = variablesServiceMapper;
	}

}
