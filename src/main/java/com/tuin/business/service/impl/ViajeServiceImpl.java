/*
 * Created on 28 ago 2017 ( Time 17:51:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.tuin.bean.Viaje;
import com.tuin.bean.jpa.ViajeEntity;
import java.util.List;
import com.tuin.business.service.ViajeService;
import com.tuin.business.service.mapping.ViajeServiceMapper;
import com.tuin.persistence.PersistenceServiceProvider;
import com.tuin.persistence.services.ViajePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ViajeService
 */
@Component
public class ViajeServiceImpl implements ViajeService {

	private ViajePersistence viajePersistence;

	@Resource
	private ViajeServiceMapper viajeServiceMapper;
	
	public ViajeServiceImpl() {
		viajePersistence = PersistenceServiceProvider.getService(ViajePersistence.class);
	}
		
	@Override
	public Viaje findById(Long id) {
		ViajeEntity entity = viajePersistence.load(id);
		return viajeServiceMapper.mapViajeEntityToViaje(entity);
	}

	@Override
	public List<Viaje> findAll() {
		List<ViajeEntity> entities = viajePersistence.loadAll();
		List<Viaje> beans = new ArrayList<Viaje>();
		for(ViajeEntity entity : entities) {
			beans.add(viajeServiceMapper.mapViajeEntityToViaje(entity));
		}
		return beans;
	}

	@Override
	public Viaje save(Viaje viaje) {
		return update(viaje) ;
	}

	@Override
	public Viaje create(Viaje viaje) {
		if(viajePersistence.load(viaje.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ViajeEntity viajeEntity = new ViajeEntity();
		viajeServiceMapper.mapViajeToViajeEntity(viaje, viajeEntity);
		ViajeEntity viajeEntitySaved = viajePersistence.save(viajeEntity);
		return viajeServiceMapper.mapViajeEntityToViaje(viajeEntitySaved);
	}

	@Override
	public Viaje update(Viaje viaje) {
		ViajeEntity viajeEntity = viajePersistence.load(viaje.getId());
		viajeServiceMapper.mapViajeToViajeEntity(viaje, viajeEntity);
		ViajeEntity viajeEntitySaved = viajePersistence.save(viajeEntity);
		return viajeServiceMapper.mapViajeEntityToViaje(viajeEntitySaved);
	}

	@Override
	public void delete(Long id) {
		viajePersistence.delete(id);
	}

	public ViajePersistence getViajePersistence() {
		return viajePersistence;
	}

	public void setViajePersistence(ViajePersistence viajePersistence) {
		this.viajePersistence = viajePersistence;
	}

	public ViajeServiceMapper getViajeServiceMapper() {
		return viajeServiceMapper;
	}

	public void setViajeServiceMapper(ViajeServiceMapper viajeServiceMapper) {
		this.viajeServiceMapper = viajeServiceMapper;
	}

}
