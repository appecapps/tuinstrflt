/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.tuin.bean.Clienteviaje;
import com.tuin.bean.jpa.ClienteviajeEntity;
import com.tuin.bean.jpa.ViajeEntity;
import com.tuin.bean.jpa.ClienteEntity;
import com.tuin.bean.jpa.EstadoEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ClienteviajeServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ClienteviajeServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ClienteviajeEntity' to 'Clienteviaje'
	 * @param clienteviajeEntity
	 */
	public Clienteviaje mapClienteviajeEntityToClienteviaje(ClienteviajeEntity clienteviajeEntity) {
		if(clienteviajeEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Clienteviaje clienteviaje = map(clienteviajeEntity, Clienteviaje.class);

		//--- Link mapping ( link to Viaje )
		if(clienteviajeEntity.getViaje() != null) {
			clienteviaje.setViajeid(clienteviajeEntity.getViaje().getId());
		}
		//--- Link mapping ( link to Cliente )
		if(clienteviajeEntity.getCliente() != null) {
			clienteviaje.setClienteid(clienteviajeEntity.getCliente().getId());
		}
		//--- Link mapping ( link to Estado )
		if(clienteviajeEntity.getEstado() != null) {
			clienteviaje.setEstadoid(clienteviajeEntity.getEstado().getId());
		}
		return clienteviaje;
	}
	
	/**
	 * Mapping from 'Clienteviaje' to 'ClienteviajeEntity'
	 * @param clienteviaje
	 * @param clienteviajeEntity
	 */
	public void mapClienteviajeToClienteviajeEntity(Clienteviaje clienteviaje, ClienteviajeEntity clienteviajeEntity) {
		if(clienteviaje == null) {
			return;
		}

		//--- Generic mapping 
		map(clienteviaje, clienteviajeEntity);

		//--- Link mapping ( link : clienteviaje )
		if( hasLinkToViaje(clienteviaje) ) {
			ViajeEntity viaje1 = new ViajeEntity();
			viaje1.setId( clienteviaje.getViajeid() );
			clienteviajeEntity.setViaje( viaje1 );
		} else {
			clienteviajeEntity.setViaje( null );
		}

		//--- Link mapping ( link : clienteviaje )
		if( hasLinkToCliente(clienteviaje) ) {
			ClienteEntity cliente2 = new ClienteEntity();
			cliente2.setId( clienteviaje.getClienteid() );
			clienteviajeEntity.setCliente( cliente2 );
		} else {
			clienteviajeEntity.setCliente( null );
		}

		//--- Link mapping ( link : clienteviaje )
		if( hasLinkToEstado(clienteviaje) ) {
			EstadoEntity estado3 = new EstadoEntity();
			estado3.setId( clienteviaje.getEstadoid() );
			clienteviajeEntity.setEstado( estado3 );
		} else {
			clienteviajeEntity.setEstado( null );
		}

	}
	
	/**
	 * Verify that Viaje id is valid.
	 * @param Viaje Viaje
	 * @return boolean
	 */
	private boolean hasLinkToViaje(Clienteviaje clienteviaje) {
		if(clienteviaje.getViajeid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Cliente id is valid.
	 * @param Cliente Cliente
	 * @return boolean
	 */
	private boolean hasLinkToCliente(Clienteviaje clienteviaje) {
		if(clienteviaje.getClienteid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Estado id is valid.
	 * @param Estado Estado
	 * @return boolean
	 */
	private boolean hasLinkToEstado(Clienteviaje clienteviaje) {
		if(clienteviaje.getEstadoid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}