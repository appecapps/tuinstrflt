/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.tuin.bean.Clienteviajeservicio;
import com.tuin.bean.jpa.ClienteviajeservicioEntity;
import com.tuin.bean.jpa.ClienteviajeEntity;
import com.tuin.bean.jpa.VehiculoservicioEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ClienteviajeservicioServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ClienteviajeservicioServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ClienteviajeservicioEntity' to 'Clienteviajeservicio'
	 * @param clienteviajeservicioEntity
	 */
	public Clienteviajeservicio mapClienteviajeservicioEntityToClienteviajeservicio(ClienteviajeservicioEntity clienteviajeservicioEntity) {
		if(clienteviajeservicioEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Clienteviajeservicio clienteviajeservicio = map(clienteviajeservicioEntity, Clienteviajeservicio.class);

		//--- Link mapping ( link to Clienteviaje )
		if(clienteviajeservicioEntity.getClienteviaje() != null) {
			clienteviajeservicio.setClienteviajeid(clienteviajeservicioEntity.getClienteviaje().getId());
		}
		//--- Link mapping ( link to Vehiculoservicio )
		if(clienteviajeservicioEntity.getVehiculoservicio() != null) {
			clienteviajeservicio.setVehiculoservicioid(clienteviajeservicioEntity.getVehiculoservicio().getId());
		}
		return clienteviajeservicio;
	}
	
	/**
	 * Mapping from 'Clienteviajeservicio' to 'ClienteviajeservicioEntity'
	 * @param clienteviajeservicio
	 * @param clienteviajeservicioEntity
	 */
	public void mapClienteviajeservicioToClienteviajeservicioEntity(Clienteviajeservicio clienteviajeservicio, ClienteviajeservicioEntity clienteviajeservicioEntity) {
		if(clienteviajeservicio == null) {
			return;
		}

		//--- Generic mapping 
		map(clienteviajeservicio, clienteviajeservicioEntity);

		//--- Link mapping ( link : clienteviajeservicio )
		if( hasLinkToClienteviaje(clienteviajeservicio) ) {
			ClienteviajeEntity clienteviaje1 = new ClienteviajeEntity();
			clienteviaje1.setId( clienteviajeservicio.getClienteviajeid() );
			clienteviajeservicioEntity.setClienteviaje( clienteviaje1 );
		} else {
			clienteviajeservicioEntity.setClienteviaje( null );
		}

		//--- Link mapping ( link : clienteviajeservicio )
		if( hasLinkToVehiculoservicio(clienteviajeservicio) ) {
			VehiculoservicioEntity vehiculoservicio2 = new VehiculoservicioEntity();
			vehiculoservicio2.setId( clienteviajeservicio.getVehiculoservicioid() );
			clienteviajeservicioEntity.setVehiculoservicio( vehiculoservicio2 );
		} else {
			clienteviajeservicioEntity.setVehiculoservicio( null );
		}

	}
	
	/**
	 * Verify that Clienteviaje id is valid.
	 * @param Clienteviaje Clienteviaje
	 * @return boolean
	 */
	private boolean hasLinkToClienteviaje(Clienteviajeservicio clienteviajeservicio) {
		if(clienteviajeservicio.getClienteviajeid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Vehiculoservicio id is valid.
	 * @param Vehiculoservicio Vehiculoservicio
	 * @return boolean
	 */
	private boolean hasLinkToVehiculoservicio(Clienteviajeservicio clienteviajeservicio) {
		if(clienteviajeservicio.getVehiculoservicioid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}