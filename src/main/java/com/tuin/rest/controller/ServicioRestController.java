/*
 * Created on 28 ago 2017 ( Time 17:51:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.tuin.bean.Servicio;
import com.tuin.business.service.ServicioService;
import com.tuin.web.listitem.ServicioListItem;

/**
 * Spring MVC controller for 'Servicio' management.
 */
@Controller
public class ServicioRestController {

	@Resource
	private ServicioService servicioService;
	
	@RequestMapping( value="/items/servicio",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<ServicioListItem> findAllAsListItems() {
		List<Servicio> list = servicioService.findAll();
		List<ServicioListItem> items = new LinkedList<ServicioListItem>();
		for ( Servicio servicio : list ) {
			items.add(new ServicioListItem( servicio ) );
		}
		return items;
	}
	
	@RequestMapping( value="/servicio",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Servicio> findAll() {
		return servicioService.findAll();
	}

	@RequestMapping( value="/servicio/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Servicio findOne(@PathVariable("id") Long id) {
		return servicioService.findById(id);
	}
	
	@RequestMapping( value="/servicio",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Servicio create(@RequestBody Servicio servicio) {
		return servicioService.create(servicio);
	}

	@RequestMapping( value="/servicio/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Servicio update(@PathVariable("id") Long id, @RequestBody Servicio servicio) {
		return servicioService.update(servicio);
	}

	@RequestMapping( value="/servicio/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Long id) {
		servicioService.delete(id);
	}
	
}
