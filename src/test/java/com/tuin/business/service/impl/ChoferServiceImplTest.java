/*
 * Created on 28 ago 2017 ( Time 17:51:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Chofer;
import com.tuin.bean.jpa.ChoferEntity;
import java.math.BigDecimal;
import java.util.List;
import com.tuin.business.service.mapping.ChoferServiceMapper;
import com.tuin.persistence.services.jpa.ChoferPersistenceJPA;
import com.tuin.test.ChoferFactoryForTest;
import com.tuin.test.ChoferEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChoferService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChoferServiceImplTest {

	@InjectMocks
	private ChoferServiceImpl choferService;
	@Mock
	private ChoferPersistenceJPA choferPersistenceJPA;
	@Mock
	private ChoferServiceMapper choferServiceMapper;
	
	private ChoferFactoryForTest choferFactoryForTest = new ChoferFactoryForTest();

	private ChoferEntityFactoryForTest choferEntityFactoryForTest = new ChoferEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ChoferEntity choferEntity = choferPersistenceJPA.load(id);
		
		Chofer chofer = choferFactoryForTest.newChofer();
		when(choferServiceMapper.mapChoferEntityToChofer(choferEntity)).thenReturn(chofer);

		// When
		Chofer choferFound = choferService.findById(id);

		// Then
		assertEquals(chofer.getId(),choferFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChoferEntity> choferEntitys = new ArrayList<ChoferEntity>();
		ChoferEntity choferEntity1 = choferEntityFactoryForTest.newChoferEntity();
		choferEntitys.add(choferEntity1);
		ChoferEntity choferEntity2 = choferEntityFactoryForTest.newChoferEntity();
		choferEntitys.add(choferEntity2);
		when(choferPersistenceJPA.loadAll()).thenReturn(choferEntitys);
		
		Chofer chofer1 = choferFactoryForTest.newChofer();
		when(choferServiceMapper.mapChoferEntityToChofer(choferEntity1)).thenReturn(chofer1);
		Chofer chofer2 = choferFactoryForTest.newChofer();
		when(choferServiceMapper.mapChoferEntityToChofer(choferEntity2)).thenReturn(chofer2);

		// When
		List<Chofer> chofersFounds = choferService.findAll();

		// Then
		assertTrue(chofer1 == chofersFounds.get(0));
		assertTrue(chofer2 == chofersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Chofer chofer = choferFactoryForTest.newChofer();

		ChoferEntity choferEntity = choferEntityFactoryForTest.newChoferEntity();
		when(choferPersistenceJPA.load(chofer.getId())).thenReturn(null);
		
		choferEntity = new ChoferEntity();
		choferServiceMapper.mapChoferToChoferEntity(chofer, choferEntity);
		ChoferEntity choferEntitySaved = choferPersistenceJPA.save(choferEntity);
		
		Chofer choferSaved = choferFactoryForTest.newChofer();
		when(choferServiceMapper.mapChoferEntityToChofer(choferEntitySaved)).thenReturn(choferSaved);

		// When
		Chofer choferResult = choferService.create(chofer);

		// Then
		assertTrue(choferResult == choferSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Chofer chofer = choferFactoryForTest.newChofer();

		ChoferEntity choferEntity = choferEntityFactoryForTest.newChoferEntity();
		when(choferPersistenceJPA.load(chofer.getId())).thenReturn(choferEntity);

		// When
		Exception exception = null;
		try {
			choferService.create(chofer);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Chofer chofer = choferFactoryForTest.newChofer();

		ChoferEntity choferEntity = choferEntityFactoryForTest.newChoferEntity();
		when(choferPersistenceJPA.load(chofer.getId())).thenReturn(choferEntity);
		
		ChoferEntity choferEntitySaved = choferEntityFactoryForTest.newChoferEntity();
		when(choferPersistenceJPA.save(choferEntity)).thenReturn(choferEntitySaved);
		
		Chofer choferSaved = choferFactoryForTest.newChofer();
		when(choferServiceMapper.mapChoferEntityToChofer(choferEntitySaved)).thenReturn(choferSaved);

		// When
		Chofer choferResult = choferService.update(chofer);

		// Then
		verify(choferServiceMapper).mapChoferToChoferEntity(chofer, choferEntity);
		assertTrue(choferResult == choferSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		choferService.delete(id);

		// Then
		verify(choferPersistenceJPA).delete(id);
		
	}

}
