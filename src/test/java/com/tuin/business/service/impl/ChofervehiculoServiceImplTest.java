/*
 * Created on 28 ago 2017 ( Time 17:51:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Chofervehiculo;
import com.tuin.bean.jpa.ChofervehiculoEntity;
import java.util.List;
import com.tuin.business.service.mapping.ChofervehiculoServiceMapper;
import com.tuin.persistence.services.jpa.ChofervehiculoPersistenceJPA;
import com.tuin.test.ChofervehiculoFactoryForTest;
import com.tuin.test.ChofervehiculoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChofervehiculoService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChofervehiculoServiceImplTest {

	@InjectMocks
	private ChofervehiculoServiceImpl chofervehiculoService;
	@Mock
	private ChofervehiculoPersistenceJPA chofervehiculoPersistenceJPA;
	@Mock
	private ChofervehiculoServiceMapper chofervehiculoServiceMapper;
	
	private ChofervehiculoFactoryForTest chofervehiculoFactoryForTest = new ChofervehiculoFactoryForTest();

	private ChofervehiculoEntityFactoryForTest chofervehiculoEntityFactoryForTest = new ChofervehiculoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ChofervehiculoEntity chofervehiculoEntity = chofervehiculoPersistenceJPA.load(id);
		
		Chofervehiculo chofervehiculo = chofervehiculoFactoryForTest.newChofervehiculo();
		when(chofervehiculoServiceMapper.mapChofervehiculoEntityToChofervehiculo(chofervehiculoEntity)).thenReturn(chofervehiculo);

		// When
		Chofervehiculo chofervehiculoFound = chofervehiculoService.findById(id);

		// Then
		assertEquals(chofervehiculo.getId(),chofervehiculoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChofervehiculoEntity> chofervehiculoEntitys = new ArrayList<ChofervehiculoEntity>();
		ChofervehiculoEntity chofervehiculoEntity1 = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		chofervehiculoEntitys.add(chofervehiculoEntity1);
		ChofervehiculoEntity chofervehiculoEntity2 = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		chofervehiculoEntitys.add(chofervehiculoEntity2);
		when(chofervehiculoPersistenceJPA.loadAll()).thenReturn(chofervehiculoEntitys);
		
		Chofervehiculo chofervehiculo1 = chofervehiculoFactoryForTest.newChofervehiculo();
		when(chofervehiculoServiceMapper.mapChofervehiculoEntityToChofervehiculo(chofervehiculoEntity1)).thenReturn(chofervehiculo1);
		Chofervehiculo chofervehiculo2 = chofervehiculoFactoryForTest.newChofervehiculo();
		when(chofervehiculoServiceMapper.mapChofervehiculoEntityToChofervehiculo(chofervehiculoEntity2)).thenReturn(chofervehiculo2);

		// When
		List<Chofervehiculo> chofervehiculosFounds = chofervehiculoService.findAll();

		// Then
		assertTrue(chofervehiculo1 == chofervehiculosFounds.get(0));
		assertTrue(chofervehiculo2 == chofervehiculosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Chofervehiculo chofervehiculo = chofervehiculoFactoryForTest.newChofervehiculo();

		ChofervehiculoEntity chofervehiculoEntity = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		when(chofervehiculoPersistenceJPA.load(chofervehiculo.getId())).thenReturn(null);
		
		chofervehiculoEntity = new ChofervehiculoEntity();
		chofervehiculoServiceMapper.mapChofervehiculoToChofervehiculoEntity(chofervehiculo, chofervehiculoEntity);
		ChofervehiculoEntity chofervehiculoEntitySaved = chofervehiculoPersistenceJPA.save(chofervehiculoEntity);
		
		Chofervehiculo chofervehiculoSaved = chofervehiculoFactoryForTest.newChofervehiculo();
		when(chofervehiculoServiceMapper.mapChofervehiculoEntityToChofervehiculo(chofervehiculoEntitySaved)).thenReturn(chofervehiculoSaved);

		// When
		Chofervehiculo chofervehiculoResult = chofervehiculoService.create(chofervehiculo);

		// Then
		assertTrue(chofervehiculoResult == chofervehiculoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Chofervehiculo chofervehiculo = chofervehiculoFactoryForTest.newChofervehiculo();

		ChofervehiculoEntity chofervehiculoEntity = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		when(chofervehiculoPersistenceJPA.load(chofervehiculo.getId())).thenReturn(chofervehiculoEntity);

		// When
		Exception exception = null;
		try {
			chofervehiculoService.create(chofervehiculo);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Chofervehiculo chofervehiculo = chofervehiculoFactoryForTest.newChofervehiculo();

		ChofervehiculoEntity chofervehiculoEntity = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		when(chofervehiculoPersistenceJPA.load(chofervehiculo.getId())).thenReturn(chofervehiculoEntity);
		
		ChofervehiculoEntity chofervehiculoEntitySaved = chofervehiculoEntityFactoryForTest.newChofervehiculoEntity();
		when(chofervehiculoPersistenceJPA.save(chofervehiculoEntity)).thenReturn(chofervehiculoEntitySaved);
		
		Chofervehiculo chofervehiculoSaved = chofervehiculoFactoryForTest.newChofervehiculo();
		when(chofervehiculoServiceMapper.mapChofervehiculoEntityToChofervehiculo(chofervehiculoEntitySaved)).thenReturn(chofervehiculoSaved);

		// When
		Chofervehiculo chofervehiculoResult = chofervehiculoService.update(chofervehiculo);

		// Then
		verify(chofervehiculoServiceMapper).mapChofervehiculoToChofervehiculoEntity(chofervehiculo, chofervehiculoEntity);
		assertTrue(chofervehiculoResult == chofervehiculoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		chofervehiculoService.delete(id);

		// Then
		verify(chofervehiculoPersistenceJPA).delete(id);
		
	}

}
