/*
 * Created on 28 ago 2017 ( Time 17:51:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Cliente;
import com.tuin.bean.jpa.ClienteEntity;
import java.util.List;
import com.tuin.business.service.mapping.ClienteServiceMapper;
import com.tuin.persistence.services.jpa.ClientePersistenceJPA;
import com.tuin.test.ClienteFactoryForTest;
import com.tuin.test.ClienteEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ClienteService
 */
@RunWith(MockitoJUnitRunner.class)
public class ClienteServiceImplTest {

	@InjectMocks
	private ClienteServiceImpl clienteService;
	@Mock
	private ClientePersistenceJPA clientePersistenceJPA;
	@Mock
	private ClienteServiceMapper clienteServiceMapper;
	
	private ClienteFactoryForTest clienteFactoryForTest = new ClienteFactoryForTest();

	private ClienteEntityFactoryForTest clienteEntityFactoryForTest = new ClienteEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ClienteEntity clienteEntity = clientePersistenceJPA.load(id);
		
		Cliente cliente = clienteFactoryForTest.newCliente();
		when(clienteServiceMapper.mapClienteEntityToCliente(clienteEntity)).thenReturn(cliente);

		// When
		Cliente clienteFound = clienteService.findById(id);

		// Then
		assertEquals(cliente.getId(),clienteFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ClienteEntity> clienteEntitys = new ArrayList<ClienteEntity>();
		ClienteEntity clienteEntity1 = clienteEntityFactoryForTest.newClienteEntity();
		clienteEntitys.add(clienteEntity1);
		ClienteEntity clienteEntity2 = clienteEntityFactoryForTest.newClienteEntity();
		clienteEntitys.add(clienteEntity2);
		when(clientePersistenceJPA.loadAll()).thenReturn(clienteEntitys);
		
		Cliente cliente1 = clienteFactoryForTest.newCliente();
		when(clienteServiceMapper.mapClienteEntityToCliente(clienteEntity1)).thenReturn(cliente1);
		Cliente cliente2 = clienteFactoryForTest.newCliente();
		when(clienteServiceMapper.mapClienteEntityToCliente(clienteEntity2)).thenReturn(cliente2);

		// When
		List<Cliente> clientesFounds = clienteService.findAll();

		// Then
		assertTrue(cliente1 == clientesFounds.get(0));
		assertTrue(cliente2 == clientesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Cliente cliente = clienteFactoryForTest.newCliente();

		ClienteEntity clienteEntity = clienteEntityFactoryForTest.newClienteEntity();
		when(clientePersistenceJPA.load(cliente.getId())).thenReturn(null);
		
		clienteEntity = new ClienteEntity();
		clienteServiceMapper.mapClienteToClienteEntity(cliente, clienteEntity);
		ClienteEntity clienteEntitySaved = clientePersistenceJPA.save(clienteEntity);
		
		Cliente clienteSaved = clienteFactoryForTest.newCliente();
		when(clienteServiceMapper.mapClienteEntityToCliente(clienteEntitySaved)).thenReturn(clienteSaved);

		// When
		Cliente clienteResult = clienteService.create(cliente);

		// Then
		assertTrue(clienteResult == clienteSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Cliente cliente = clienteFactoryForTest.newCliente();

		ClienteEntity clienteEntity = clienteEntityFactoryForTest.newClienteEntity();
		when(clientePersistenceJPA.load(cliente.getId())).thenReturn(clienteEntity);

		// When
		Exception exception = null;
		try {
			clienteService.create(cliente);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Cliente cliente = clienteFactoryForTest.newCliente();

		ClienteEntity clienteEntity = clienteEntityFactoryForTest.newClienteEntity();
		when(clientePersistenceJPA.load(cliente.getId())).thenReturn(clienteEntity);
		
		ClienteEntity clienteEntitySaved = clienteEntityFactoryForTest.newClienteEntity();
		when(clientePersistenceJPA.save(clienteEntity)).thenReturn(clienteEntitySaved);
		
		Cliente clienteSaved = clienteFactoryForTest.newCliente();
		when(clienteServiceMapper.mapClienteEntityToCliente(clienteEntitySaved)).thenReturn(clienteSaved);

		// When
		Cliente clienteResult = clienteService.update(cliente);

		// Then
		verify(clienteServiceMapper).mapClienteToClienteEntity(cliente, clienteEntity);
		assertTrue(clienteResult == clienteSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		clienteService.delete(id);

		// Then
		verify(clientePersistenceJPA).delete(id);
		
	}

}
