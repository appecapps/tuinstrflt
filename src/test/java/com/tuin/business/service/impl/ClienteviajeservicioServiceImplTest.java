/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Clienteviajeservicio;
import com.tuin.bean.jpa.ClienteviajeservicioEntity;
import java.math.BigDecimal;
import com.tuin.business.service.mapping.ClienteviajeservicioServiceMapper;
import com.tuin.persistence.services.jpa.ClienteviajeservicioPersistenceJPA;
import com.tuin.test.ClienteviajeservicioFactoryForTest;
import com.tuin.test.ClienteviajeservicioEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ClienteviajeservicioService
 */
@RunWith(MockitoJUnitRunner.class)
public class ClienteviajeservicioServiceImplTest {

	@InjectMocks
	private ClienteviajeservicioServiceImpl clienteviajeservicioService;
	@Mock
	private ClienteviajeservicioPersistenceJPA clienteviajeservicioPersistenceJPA;
	@Mock
	private ClienteviajeservicioServiceMapper clienteviajeservicioServiceMapper;
	
	private ClienteviajeservicioFactoryForTest clienteviajeservicioFactoryForTest = new ClienteviajeservicioFactoryForTest();

	private ClienteviajeservicioEntityFactoryForTest clienteviajeservicioEntityFactoryForTest = new ClienteviajeservicioEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ClienteviajeservicioEntity clienteviajeservicioEntity = clienteviajeservicioPersistenceJPA.load(id);
		
		Clienteviajeservicio clienteviajeservicio = clienteviajeservicioFactoryForTest.newClienteviajeservicio();
		when(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntity)).thenReturn(clienteviajeservicio);

		// When
		Clienteviajeservicio clienteviajeservicioFound = clienteviajeservicioService.findById(id);

		// Then
		assertEquals(clienteviajeservicio.getId(),clienteviajeservicioFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ClienteviajeservicioEntity> clienteviajeservicioEntitys = new ArrayList<ClienteviajeservicioEntity>();
		ClienteviajeservicioEntity clienteviajeservicioEntity1 = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		clienteviajeservicioEntitys.add(clienteviajeservicioEntity1);
		ClienteviajeservicioEntity clienteviajeservicioEntity2 = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		clienteviajeservicioEntitys.add(clienteviajeservicioEntity2);
		when(clienteviajeservicioPersistenceJPA.loadAll()).thenReturn(clienteviajeservicioEntitys);
		
		Clienteviajeservicio clienteviajeservicio1 = clienteviajeservicioFactoryForTest.newClienteviajeservicio();
		when(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntity1)).thenReturn(clienteviajeservicio1);
		Clienteviajeservicio clienteviajeservicio2 = clienteviajeservicioFactoryForTest.newClienteviajeservicio();
		when(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntity2)).thenReturn(clienteviajeservicio2);

		// When
		List<Clienteviajeservicio> clienteviajeserviciosFounds = clienteviajeservicioService.findAll();

		// Then
		assertTrue(clienteviajeservicio1 == clienteviajeserviciosFounds.get(0));
		assertTrue(clienteviajeservicio2 == clienteviajeserviciosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Clienteviajeservicio clienteviajeservicio = clienteviajeservicioFactoryForTest.newClienteviajeservicio();

		ClienteviajeservicioEntity clienteviajeservicioEntity = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		when(clienteviajeservicioPersistenceJPA.load(clienteviajeservicio.getId())).thenReturn(null);
		
		clienteviajeservicioEntity = new ClienteviajeservicioEntity();
		clienteviajeservicioServiceMapper.mapClienteviajeservicioToClienteviajeservicioEntity(clienteviajeservicio, clienteviajeservicioEntity);
		ClienteviajeservicioEntity clienteviajeservicioEntitySaved = clienteviajeservicioPersistenceJPA.save(clienteviajeservicioEntity);
		
		Clienteviajeservicio clienteviajeservicioSaved = clienteviajeservicioFactoryForTest.newClienteviajeservicio();
		when(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntitySaved)).thenReturn(clienteviajeservicioSaved);

		// When
		Clienteviajeservicio clienteviajeservicioResult = clienteviajeservicioService.create(clienteviajeservicio);

		// Then
		assertTrue(clienteviajeservicioResult == clienteviajeservicioSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Clienteviajeservicio clienteviajeservicio = clienteviajeservicioFactoryForTest.newClienteviajeservicio();

		ClienteviajeservicioEntity clienteviajeservicioEntity = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		when(clienteviajeservicioPersistenceJPA.load(clienteviajeservicio.getId())).thenReturn(clienteviajeservicioEntity);

		// When
		Exception exception = null;
		try {
			clienteviajeservicioService.create(clienteviajeservicio);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Clienteviajeservicio clienteviajeservicio = clienteviajeservicioFactoryForTest.newClienteviajeservicio();

		ClienteviajeservicioEntity clienteviajeservicioEntity = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		when(clienteviajeservicioPersistenceJPA.load(clienteviajeservicio.getId())).thenReturn(clienteviajeservicioEntity);
		
		ClienteviajeservicioEntity clienteviajeservicioEntitySaved = clienteviajeservicioEntityFactoryForTest.newClienteviajeservicioEntity();
		when(clienteviajeservicioPersistenceJPA.save(clienteviajeservicioEntity)).thenReturn(clienteviajeservicioEntitySaved);
		
		Clienteviajeservicio clienteviajeservicioSaved = clienteviajeservicioFactoryForTest.newClienteviajeservicio();
		when(clienteviajeservicioServiceMapper.mapClienteviajeservicioEntityToClienteviajeservicio(clienteviajeservicioEntitySaved)).thenReturn(clienteviajeservicioSaved);

		// When
		Clienteviajeservicio clienteviajeservicioResult = clienteviajeservicioService.update(clienteviajeservicio);

		// Then
		verify(clienteviajeservicioServiceMapper).mapClienteviajeservicioToClienteviajeservicioEntity(clienteviajeservicio, clienteviajeservicioEntity);
		assertTrue(clienteviajeservicioResult == clienteviajeservicioSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		clienteviajeservicioService.delete(id);

		// Then
		verify(clienteviajeservicioPersistenceJPA).delete(id);
		
	}

}
