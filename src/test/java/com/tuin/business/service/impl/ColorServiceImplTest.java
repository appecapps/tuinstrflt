/*
 * Created on 28 ago 2017 ( Time 17:51:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Color;
import com.tuin.bean.jpa.ColorEntity;
import java.util.List;
import com.tuin.business.service.mapping.ColorServiceMapper;
import com.tuin.persistence.services.jpa.ColorPersistenceJPA;
import com.tuin.test.ColorFactoryForTest;
import com.tuin.test.ColorEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ColorService
 */
@RunWith(MockitoJUnitRunner.class)
public class ColorServiceImplTest {

	@InjectMocks
	private ColorServiceImpl colorService;
	@Mock
	private ColorPersistenceJPA colorPersistenceJPA;
	@Mock
	private ColorServiceMapper colorServiceMapper;
	
	private ColorFactoryForTest colorFactoryForTest = new ColorFactoryForTest();

	private ColorEntityFactoryForTest colorEntityFactoryForTest = new ColorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ColorEntity colorEntity = colorPersistenceJPA.load(id);
		
		Color color = colorFactoryForTest.newColor();
		when(colorServiceMapper.mapColorEntityToColor(colorEntity)).thenReturn(color);

		// When
		Color colorFound = colorService.findById(id);

		// Then
		assertEquals(color.getId(),colorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ColorEntity> colorEntitys = new ArrayList<ColorEntity>();
		ColorEntity colorEntity1 = colorEntityFactoryForTest.newColorEntity();
		colorEntitys.add(colorEntity1);
		ColorEntity colorEntity2 = colorEntityFactoryForTest.newColorEntity();
		colorEntitys.add(colorEntity2);
		when(colorPersistenceJPA.loadAll()).thenReturn(colorEntitys);
		
		Color color1 = colorFactoryForTest.newColor();
		when(colorServiceMapper.mapColorEntityToColor(colorEntity1)).thenReturn(color1);
		Color color2 = colorFactoryForTest.newColor();
		when(colorServiceMapper.mapColorEntityToColor(colorEntity2)).thenReturn(color2);

		// When
		List<Color> colorsFounds = colorService.findAll();

		// Then
		assertTrue(color1 == colorsFounds.get(0));
		assertTrue(color2 == colorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Color color = colorFactoryForTest.newColor();

		ColorEntity colorEntity = colorEntityFactoryForTest.newColorEntity();
		when(colorPersistenceJPA.load(color.getId())).thenReturn(null);
		
		colorEntity = new ColorEntity();
		colorServiceMapper.mapColorToColorEntity(color, colorEntity);
		ColorEntity colorEntitySaved = colorPersistenceJPA.save(colorEntity);
		
		Color colorSaved = colorFactoryForTest.newColor();
		when(colorServiceMapper.mapColorEntityToColor(colorEntitySaved)).thenReturn(colorSaved);

		// When
		Color colorResult = colorService.create(color);

		// Then
		assertTrue(colorResult == colorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Color color = colorFactoryForTest.newColor();

		ColorEntity colorEntity = colorEntityFactoryForTest.newColorEntity();
		when(colorPersistenceJPA.load(color.getId())).thenReturn(colorEntity);

		// When
		Exception exception = null;
		try {
			colorService.create(color);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Color color = colorFactoryForTest.newColor();

		ColorEntity colorEntity = colorEntityFactoryForTest.newColorEntity();
		when(colorPersistenceJPA.load(color.getId())).thenReturn(colorEntity);
		
		ColorEntity colorEntitySaved = colorEntityFactoryForTest.newColorEntity();
		when(colorPersistenceJPA.save(colorEntity)).thenReturn(colorEntitySaved);
		
		Color colorSaved = colorFactoryForTest.newColor();
		when(colorServiceMapper.mapColorEntityToColor(colorEntitySaved)).thenReturn(colorSaved);

		// When
		Color colorResult = colorService.update(color);

		// Then
		verify(colorServiceMapper).mapColorToColorEntity(color, colorEntity);
		assertTrue(colorResult == colorSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		colorService.delete(id);

		// Then
		verify(colorPersistenceJPA).delete(id);
		
	}

}
