/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Componentedocumento;
import com.tuin.bean.jpa.ComponentedocumentoEntity;
import java.math.BigDecimal;
import com.tuin.business.service.mapping.ComponentedocumentoServiceMapper;
import com.tuin.persistence.services.jpa.ComponentedocumentoPersistenceJPA;
import com.tuin.test.ComponentedocumentoFactoryForTest;
import com.tuin.test.ComponentedocumentoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ComponentedocumentoService
 */
@RunWith(MockitoJUnitRunner.class)
public class ComponentedocumentoServiceImplTest {

	@InjectMocks
	private ComponentedocumentoServiceImpl componentedocumentoService;
	@Mock
	private ComponentedocumentoPersistenceJPA componentedocumentoPersistenceJPA;
	@Mock
	private ComponentedocumentoServiceMapper componentedocumentoServiceMapper;
	
	private ComponentedocumentoFactoryForTest componentedocumentoFactoryForTest = new ComponentedocumentoFactoryForTest();

	private ComponentedocumentoEntityFactoryForTest componentedocumentoEntityFactoryForTest = new ComponentedocumentoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ComponentedocumentoEntity componentedocumentoEntity = componentedocumentoPersistenceJPA.load(id);
		
		Componentedocumento componentedocumento = componentedocumentoFactoryForTest.newComponentedocumento();
		when(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntity)).thenReturn(componentedocumento);

		// When
		Componentedocumento componentedocumentoFound = componentedocumentoService.findById(id);

		// Then
		assertEquals(componentedocumento.getId(),componentedocumentoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ComponentedocumentoEntity> componentedocumentoEntitys = new ArrayList<ComponentedocumentoEntity>();
		ComponentedocumentoEntity componentedocumentoEntity1 = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		componentedocumentoEntitys.add(componentedocumentoEntity1);
		ComponentedocumentoEntity componentedocumentoEntity2 = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		componentedocumentoEntitys.add(componentedocumentoEntity2);
		when(componentedocumentoPersistenceJPA.loadAll()).thenReturn(componentedocumentoEntitys);
		
		Componentedocumento componentedocumento1 = componentedocumentoFactoryForTest.newComponentedocumento();
		when(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntity1)).thenReturn(componentedocumento1);
		Componentedocumento componentedocumento2 = componentedocumentoFactoryForTest.newComponentedocumento();
		when(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntity2)).thenReturn(componentedocumento2);

		// When
		List<Componentedocumento> componentedocumentosFounds = componentedocumentoService.findAll();

		// Then
		assertTrue(componentedocumento1 == componentedocumentosFounds.get(0));
		assertTrue(componentedocumento2 == componentedocumentosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Componentedocumento componentedocumento = componentedocumentoFactoryForTest.newComponentedocumento();

		ComponentedocumentoEntity componentedocumentoEntity = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		when(componentedocumentoPersistenceJPA.load(componentedocumento.getId())).thenReturn(null);
		
		componentedocumentoEntity = new ComponentedocumentoEntity();
		componentedocumentoServiceMapper.mapComponentedocumentoToComponentedocumentoEntity(componentedocumento, componentedocumentoEntity);
		ComponentedocumentoEntity componentedocumentoEntitySaved = componentedocumentoPersistenceJPA.save(componentedocumentoEntity);
		
		Componentedocumento componentedocumentoSaved = componentedocumentoFactoryForTest.newComponentedocumento();
		when(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntitySaved)).thenReturn(componentedocumentoSaved);

		// When
		Componentedocumento componentedocumentoResult = componentedocumentoService.create(componentedocumento);

		// Then
		assertTrue(componentedocumentoResult == componentedocumentoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Componentedocumento componentedocumento = componentedocumentoFactoryForTest.newComponentedocumento();

		ComponentedocumentoEntity componentedocumentoEntity = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		when(componentedocumentoPersistenceJPA.load(componentedocumento.getId())).thenReturn(componentedocumentoEntity);

		// When
		Exception exception = null;
		try {
			componentedocumentoService.create(componentedocumento);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Componentedocumento componentedocumento = componentedocumentoFactoryForTest.newComponentedocumento();

		ComponentedocumentoEntity componentedocumentoEntity = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		when(componentedocumentoPersistenceJPA.load(componentedocumento.getId())).thenReturn(componentedocumentoEntity);
		
		ComponentedocumentoEntity componentedocumentoEntitySaved = componentedocumentoEntityFactoryForTest.newComponentedocumentoEntity();
		when(componentedocumentoPersistenceJPA.save(componentedocumentoEntity)).thenReturn(componentedocumentoEntitySaved);
		
		Componentedocumento componentedocumentoSaved = componentedocumentoFactoryForTest.newComponentedocumento();
		when(componentedocumentoServiceMapper.mapComponentedocumentoEntityToComponentedocumento(componentedocumentoEntitySaved)).thenReturn(componentedocumentoSaved);

		// When
		Componentedocumento componentedocumentoResult = componentedocumentoService.update(componentedocumento);

		// Then
		verify(componentedocumentoServiceMapper).mapComponentedocumentoToComponentedocumentoEntity(componentedocumento, componentedocumentoEntity);
		assertTrue(componentedocumentoResult == componentedocumentoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		componentedocumentoService.delete(id);

		// Then
		verify(componentedocumentoPersistenceJPA).delete(id);
		
	}

}
