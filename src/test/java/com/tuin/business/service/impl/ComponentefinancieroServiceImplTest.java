/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Componentefinanciero;
import com.tuin.bean.jpa.ComponentefinancieroEntity;
import java.util.Date;
import java.util.List;
import com.tuin.business.service.mapping.ComponentefinancieroServiceMapper;
import com.tuin.persistence.services.jpa.ComponentefinancieroPersistenceJPA;
import com.tuin.test.ComponentefinancieroFactoryForTest;
import com.tuin.test.ComponentefinancieroEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ComponentefinancieroService
 */
@RunWith(MockitoJUnitRunner.class)
public class ComponentefinancieroServiceImplTest {

	@InjectMocks
	private ComponentefinancieroServiceImpl componentefinancieroService;
	@Mock
	private ComponentefinancieroPersistenceJPA componentefinancieroPersistenceJPA;
	@Mock
	private ComponentefinancieroServiceMapper componentefinancieroServiceMapper;
	
	private ComponentefinancieroFactoryForTest componentefinancieroFactoryForTest = new ComponentefinancieroFactoryForTest();

	private ComponentefinancieroEntityFactoryForTest componentefinancieroEntityFactoryForTest = new ComponentefinancieroEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ComponentefinancieroEntity componentefinancieroEntity = componentefinancieroPersistenceJPA.load(id);
		
		Componentefinanciero componentefinanciero = componentefinancieroFactoryForTest.newComponentefinanciero();
		when(componentefinancieroServiceMapper.mapComponentefinancieroEntityToComponentefinanciero(componentefinancieroEntity)).thenReturn(componentefinanciero);

		// When
		Componentefinanciero componentefinancieroFound = componentefinancieroService.findById(id);

		// Then
		assertEquals(componentefinanciero.getId(),componentefinancieroFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ComponentefinancieroEntity> componentefinancieroEntitys = new ArrayList<ComponentefinancieroEntity>();
		ComponentefinancieroEntity componentefinancieroEntity1 = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		componentefinancieroEntitys.add(componentefinancieroEntity1);
		ComponentefinancieroEntity componentefinancieroEntity2 = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		componentefinancieroEntitys.add(componentefinancieroEntity2);
		when(componentefinancieroPersistenceJPA.loadAll()).thenReturn(componentefinancieroEntitys);
		
		Componentefinanciero componentefinanciero1 = componentefinancieroFactoryForTest.newComponentefinanciero();
		when(componentefinancieroServiceMapper.mapComponentefinancieroEntityToComponentefinanciero(componentefinancieroEntity1)).thenReturn(componentefinanciero1);
		Componentefinanciero componentefinanciero2 = componentefinancieroFactoryForTest.newComponentefinanciero();
		when(componentefinancieroServiceMapper.mapComponentefinancieroEntityToComponentefinanciero(componentefinancieroEntity2)).thenReturn(componentefinanciero2);

		// When
		List<Componentefinanciero> componentefinancierosFounds = componentefinancieroService.findAll();

		// Then
		assertTrue(componentefinanciero1 == componentefinancierosFounds.get(0));
		assertTrue(componentefinanciero2 == componentefinancierosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Componentefinanciero componentefinanciero = componentefinancieroFactoryForTest.newComponentefinanciero();

		ComponentefinancieroEntity componentefinancieroEntity = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		when(componentefinancieroPersistenceJPA.load(componentefinanciero.getId())).thenReturn(null);
		
		componentefinancieroEntity = new ComponentefinancieroEntity();
		componentefinancieroServiceMapper.mapComponentefinancieroToComponentefinancieroEntity(componentefinanciero, componentefinancieroEntity);
		ComponentefinancieroEntity componentefinancieroEntitySaved = componentefinancieroPersistenceJPA.save(componentefinancieroEntity);
		
		Componentefinanciero componentefinancieroSaved = componentefinancieroFactoryForTest.newComponentefinanciero();
		when(componentefinancieroServiceMapper.mapComponentefinancieroEntityToComponentefinanciero(componentefinancieroEntitySaved)).thenReturn(componentefinancieroSaved);

		// When
		Componentefinanciero componentefinancieroResult = componentefinancieroService.create(componentefinanciero);

		// Then
		assertTrue(componentefinancieroResult == componentefinancieroSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Componentefinanciero componentefinanciero = componentefinancieroFactoryForTest.newComponentefinanciero();

		ComponentefinancieroEntity componentefinancieroEntity = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		when(componentefinancieroPersistenceJPA.load(componentefinanciero.getId())).thenReturn(componentefinancieroEntity);

		// When
		Exception exception = null;
		try {
			componentefinancieroService.create(componentefinanciero);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Componentefinanciero componentefinanciero = componentefinancieroFactoryForTest.newComponentefinanciero();

		ComponentefinancieroEntity componentefinancieroEntity = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		when(componentefinancieroPersistenceJPA.load(componentefinanciero.getId())).thenReturn(componentefinancieroEntity);
		
		ComponentefinancieroEntity componentefinancieroEntitySaved = componentefinancieroEntityFactoryForTest.newComponentefinancieroEntity();
		when(componentefinancieroPersistenceJPA.save(componentefinancieroEntity)).thenReturn(componentefinancieroEntitySaved);
		
		Componentefinanciero componentefinancieroSaved = componentefinancieroFactoryForTest.newComponentefinanciero();
		when(componentefinancieroServiceMapper.mapComponentefinancieroEntityToComponentefinanciero(componentefinancieroEntitySaved)).thenReturn(componentefinancieroSaved);

		// When
		Componentefinanciero componentefinancieroResult = componentefinancieroService.update(componentefinanciero);

		// Then
		verify(componentefinancieroServiceMapper).mapComponentefinancieroToComponentefinancieroEntity(componentefinanciero, componentefinancieroEntity);
		assertTrue(componentefinancieroResult == componentefinancieroSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		componentefinancieroService.delete(id);

		// Then
		verify(componentefinancieroPersistenceJPA).delete(id);
		
	}

}
