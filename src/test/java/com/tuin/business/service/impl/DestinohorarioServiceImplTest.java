/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Destinohorario;
import com.tuin.bean.jpa.DestinohorarioEntity;
import java.math.BigDecimal;
import java.util.List;
import com.tuin.business.service.mapping.DestinohorarioServiceMapper;
import com.tuin.persistence.services.jpa.DestinohorarioPersistenceJPA;
import com.tuin.test.DestinohorarioFactoryForTest;
import com.tuin.test.DestinohorarioEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DestinohorarioService
 */
@RunWith(MockitoJUnitRunner.class)
public class DestinohorarioServiceImplTest {

	@InjectMocks
	private DestinohorarioServiceImpl destinohorarioService;
	@Mock
	private DestinohorarioPersistenceJPA destinohorarioPersistenceJPA;
	@Mock
	private DestinohorarioServiceMapper destinohorarioServiceMapper;
	
	private DestinohorarioFactoryForTest destinohorarioFactoryForTest = new DestinohorarioFactoryForTest();

	private DestinohorarioEntityFactoryForTest destinohorarioEntityFactoryForTest = new DestinohorarioEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		DestinohorarioEntity destinohorarioEntity = destinohorarioPersistenceJPA.load(id);
		
		Destinohorario destinohorario = destinohorarioFactoryForTest.newDestinohorario();
		when(destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntity)).thenReturn(destinohorario);

		// When
		Destinohorario destinohorarioFound = destinohorarioService.findById(id);

		// Then
		assertEquals(destinohorario.getId(),destinohorarioFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DestinohorarioEntity> destinohorarioEntitys = new ArrayList<DestinohorarioEntity>();
		DestinohorarioEntity destinohorarioEntity1 = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		destinohorarioEntitys.add(destinohorarioEntity1);
		DestinohorarioEntity destinohorarioEntity2 = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		destinohorarioEntitys.add(destinohorarioEntity2);
		when(destinohorarioPersistenceJPA.loadAll()).thenReturn(destinohorarioEntitys);
		
		Destinohorario destinohorario1 = destinohorarioFactoryForTest.newDestinohorario();
		when(destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntity1)).thenReturn(destinohorario1);
		Destinohorario destinohorario2 = destinohorarioFactoryForTest.newDestinohorario();
		when(destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntity2)).thenReturn(destinohorario2);

		// When
		List<Destinohorario> destinohorariosFounds = destinohorarioService.findAll();

		// Then
		assertTrue(destinohorario1 == destinohorariosFounds.get(0));
		assertTrue(destinohorario2 == destinohorariosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Destinohorario destinohorario = destinohorarioFactoryForTest.newDestinohorario();

		DestinohorarioEntity destinohorarioEntity = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		when(destinohorarioPersistenceJPA.load(destinohorario.getId())).thenReturn(null);
		
		destinohorarioEntity = new DestinohorarioEntity();
		destinohorarioServiceMapper.mapDestinohorarioToDestinohorarioEntity(destinohorario, destinohorarioEntity);
		DestinohorarioEntity destinohorarioEntitySaved = destinohorarioPersistenceJPA.save(destinohorarioEntity);
		
		Destinohorario destinohorarioSaved = destinohorarioFactoryForTest.newDestinohorario();
		when(destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntitySaved)).thenReturn(destinohorarioSaved);

		// When
		Destinohorario destinohorarioResult = destinohorarioService.create(destinohorario);

		// Then
		assertTrue(destinohorarioResult == destinohorarioSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Destinohorario destinohorario = destinohorarioFactoryForTest.newDestinohorario();

		DestinohorarioEntity destinohorarioEntity = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		when(destinohorarioPersistenceJPA.load(destinohorario.getId())).thenReturn(destinohorarioEntity);

		// When
		Exception exception = null;
		try {
			destinohorarioService.create(destinohorario);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Destinohorario destinohorario = destinohorarioFactoryForTest.newDestinohorario();

		DestinohorarioEntity destinohorarioEntity = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		when(destinohorarioPersistenceJPA.load(destinohorario.getId())).thenReturn(destinohorarioEntity);
		
		DestinohorarioEntity destinohorarioEntitySaved = destinohorarioEntityFactoryForTest.newDestinohorarioEntity();
		when(destinohorarioPersistenceJPA.save(destinohorarioEntity)).thenReturn(destinohorarioEntitySaved);
		
		Destinohorario destinohorarioSaved = destinohorarioFactoryForTest.newDestinohorario();
		when(destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntitySaved)).thenReturn(destinohorarioSaved);

		// When
		Destinohorario destinohorarioResult = destinohorarioService.update(destinohorario);

		// Then
		verify(destinohorarioServiceMapper).mapDestinohorarioToDestinohorarioEntity(destinohorario, destinohorarioEntity);
		assertTrue(destinohorarioResult == destinohorarioSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		destinohorarioService.delete(id);

		// Then
		verify(destinohorarioPersistenceJPA).delete(id);
		
	}

}
