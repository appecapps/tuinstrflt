/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Documento;
import com.tuin.bean.jpa.DocumentoEntity;
import java.math.BigDecimal;
import java.util.List;
import com.tuin.business.service.mapping.DocumentoServiceMapper;
import com.tuin.persistence.services.jpa.DocumentoPersistenceJPA;
import com.tuin.test.DocumentoFactoryForTest;
import com.tuin.test.DocumentoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DocumentoService
 */
@RunWith(MockitoJUnitRunner.class)
public class DocumentoServiceImplTest {

	@InjectMocks
	private DocumentoServiceImpl documentoService;
	@Mock
	private DocumentoPersistenceJPA documentoPersistenceJPA;
	@Mock
	private DocumentoServiceMapper documentoServiceMapper;
	
	private DocumentoFactoryForTest documentoFactoryForTest = new DocumentoFactoryForTest();

	private DocumentoEntityFactoryForTest documentoEntityFactoryForTest = new DocumentoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		DocumentoEntity documentoEntity = documentoPersistenceJPA.load(id);
		
		Documento documento = documentoFactoryForTest.newDocumento();
		when(documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntity)).thenReturn(documento);

		// When
		Documento documentoFound = documentoService.findById(id);

		// Then
		assertEquals(documento.getId(),documentoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DocumentoEntity> documentoEntitys = new ArrayList<DocumentoEntity>();
		DocumentoEntity documentoEntity1 = documentoEntityFactoryForTest.newDocumentoEntity();
		documentoEntitys.add(documentoEntity1);
		DocumentoEntity documentoEntity2 = documentoEntityFactoryForTest.newDocumentoEntity();
		documentoEntitys.add(documentoEntity2);
		when(documentoPersistenceJPA.loadAll()).thenReturn(documentoEntitys);
		
		Documento documento1 = documentoFactoryForTest.newDocumento();
		when(documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntity1)).thenReturn(documento1);
		Documento documento2 = documentoFactoryForTest.newDocumento();
		when(documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntity2)).thenReturn(documento2);

		// When
		List<Documento> documentosFounds = documentoService.findAll();

		// Then
		assertTrue(documento1 == documentosFounds.get(0));
		assertTrue(documento2 == documentosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Documento documento = documentoFactoryForTest.newDocumento();

		DocumentoEntity documentoEntity = documentoEntityFactoryForTest.newDocumentoEntity();
		when(documentoPersistenceJPA.load(documento.getId())).thenReturn(null);
		
		documentoEntity = new DocumentoEntity();
		documentoServiceMapper.mapDocumentoToDocumentoEntity(documento, documentoEntity);
		DocumentoEntity documentoEntitySaved = documentoPersistenceJPA.save(documentoEntity);
		
		Documento documentoSaved = documentoFactoryForTest.newDocumento();
		when(documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntitySaved)).thenReturn(documentoSaved);

		// When
		Documento documentoResult = documentoService.create(documento);

		// Then
		assertTrue(documentoResult == documentoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Documento documento = documentoFactoryForTest.newDocumento();

		DocumentoEntity documentoEntity = documentoEntityFactoryForTest.newDocumentoEntity();
		when(documentoPersistenceJPA.load(documento.getId())).thenReturn(documentoEntity);

		// When
		Exception exception = null;
		try {
			documentoService.create(documento);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Documento documento = documentoFactoryForTest.newDocumento();

		DocumentoEntity documentoEntity = documentoEntityFactoryForTest.newDocumentoEntity();
		when(documentoPersistenceJPA.load(documento.getId())).thenReturn(documentoEntity);
		
		DocumentoEntity documentoEntitySaved = documentoEntityFactoryForTest.newDocumentoEntity();
		when(documentoPersistenceJPA.save(documentoEntity)).thenReturn(documentoEntitySaved);
		
		Documento documentoSaved = documentoFactoryForTest.newDocumento();
		when(documentoServiceMapper.mapDocumentoEntityToDocumento(documentoEntitySaved)).thenReturn(documentoSaved);

		// When
		Documento documentoResult = documentoService.update(documento);

		// Then
		verify(documentoServiceMapper).mapDocumentoToDocumentoEntity(documento, documentoEntity);
		assertTrue(documentoResult == documentoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		documentoService.delete(id);

		// Then
		verify(documentoPersistenceJPA).delete(id);
		
	}

}
