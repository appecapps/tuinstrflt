/*
 * Created on 28 ago 2017 ( Time 17:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Entidad;
import com.tuin.bean.jpa.EntidadEntity;
import java.util.List;
import com.tuin.business.service.mapping.EntidadServiceMapper;
import com.tuin.persistence.services.jpa.EntidadPersistenceJPA;
import com.tuin.test.EntidadFactoryForTest;
import com.tuin.test.EntidadEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EntidadService
 */
@RunWith(MockitoJUnitRunner.class)
public class EntidadServiceImplTest {

	@InjectMocks
	private EntidadServiceImpl entidadService;
	@Mock
	private EntidadPersistenceJPA entidadPersistenceJPA;
	@Mock
	private EntidadServiceMapper entidadServiceMapper;
	
	private EntidadFactoryForTest entidadFactoryForTest = new EntidadFactoryForTest();

	private EntidadEntityFactoryForTest entidadEntityFactoryForTest = new EntidadEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		EntidadEntity entidadEntity = entidadPersistenceJPA.load(id);
		
		Entidad entidad = entidadFactoryForTest.newEntidad();
		when(entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntity)).thenReturn(entidad);

		// When
		Entidad entidadFound = entidadService.findById(id);

		// Then
		assertEquals(entidad.getId(),entidadFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<EntidadEntity> entidadEntitys = new ArrayList<EntidadEntity>();
		EntidadEntity entidadEntity1 = entidadEntityFactoryForTest.newEntidadEntity();
		entidadEntitys.add(entidadEntity1);
		EntidadEntity entidadEntity2 = entidadEntityFactoryForTest.newEntidadEntity();
		entidadEntitys.add(entidadEntity2);
		when(entidadPersistenceJPA.loadAll()).thenReturn(entidadEntitys);
		
		Entidad entidad1 = entidadFactoryForTest.newEntidad();
		when(entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntity1)).thenReturn(entidad1);
		Entidad entidad2 = entidadFactoryForTest.newEntidad();
		when(entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntity2)).thenReturn(entidad2);

		// When
		List<Entidad> entidadsFounds = entidadService.findAll();

		// Then
		assertTrue(entidad1 == entidadsFounds.get(0));
		assertTrue(entidad2 == entidadsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Entidad entidad = entidadFactoryForTest.newEntidad();

		EntidadEntity entidadEntity = entidadEntityFactoryForTest.newEntidadEntity();
		when(entidadPersistenceJPA.load(entidad.getId())).thenReturn(null);
		
		entidadEntity = new EntidadEntity();
		entidadServiceMapper.mapEntidadToEntidadEntity(entidad, entidadEntity);
		EntidadEntity entidadEntitySaved = entidadPersistenceJPA.save(entidadEntity);
		
		Entidad entidadSaved = entidadFactoryForTest.newEntidad();
		when(entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntitySaved)).thenReturn(entidadSaved);

		// When
		Entidad entidadResult = entidadService.create(entidad);

		// Then
		assertTrue(entidadResult == entidadSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Entidad entidad = entidadFactoryForTest.newEntidad();

		EntidadEntity entidadEntity = entidadEntityFactoryForTest.newEntidadEntity();
		when(entidadPersistenceJPA.load(entidad.getId())).thenReturn(entidadEntity);

		// When
		Exception exception = null;
		try {
			entidadService.create(entidad);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Entidad entidad = entidadFactoryForTest.newEntidad();

		EntidadEntity entidadEntity = entidadEntityFactoryForTest.newEntidadEntity();
		when(entidadPersistenceJPA.load(entidad.getId())).thenReturn(entidadEntity);
		
		EntidadEntity entidadEntitySaved = entidadEntityFactoryForTest.newEntidadEntity();
		when(entidadPersistenceJPA.save(entidadEntity)).thenReturn(entidadEntitySaved);
		
		Entidad entidadSaved = entidadFactoryForTest.newEntidad();
		when(entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntitySaved)).thenReturn(entidadSaved);

		// When
		Entidad entidadResult = entidadService.update(entidad);

		// Then
		verify(entidadServiceMapper).mapEntidadToEntidadEntity(entidad, entidadEntity);
		assertTrue(entidadResult == entidadSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		entidadService.delete(id);

		// Then
		verify(entidadPersistenceJPA).delete(id);
		
	}

}
