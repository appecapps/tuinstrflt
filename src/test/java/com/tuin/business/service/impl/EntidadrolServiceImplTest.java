/*
 * Created on 28 ago 2017 ( Time 17:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Entidadrol;
import com.tuin.bean.jpa.EntidadrolEntity;
import com.tuin.business.service.mapping.EntidadrolServiceMapper;
import com.tuin.persistence.services.jpa.EntidadrolPersistenceJPA;
import com.tuin.test.EntidadrolFactoryForTest;
import com.tuin.test.EntidadrolEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EntidadrolService
 */
@RunWith(MockitoJUnitRunner.class)
public class EntidadrolServiceImplTest {

	@InjectMocks
	private EntidadrolServiceImpl entidadrolService;
	@Mock
	private EntidadrolPersistenceJPA entidadrolPersistenceJPA;
	@Mock
	private EntidadrolServiceMapper entidadrolServiceMapper;
	
	private EntidadrolFactoryForTest entidadrolFactoryForTest = new EntidadrolFactoryForTest();

	private EntidadrolEntityFactoryForTest entidadrolEntityFactoryForTest = new EntidadrolEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		EntidadrolEntity entidadrolEntity = entidadrolPersistenceJPA.load(id);
		
		Entidadrol entidadrol = entidadrolFactoryForTest.newEntidadrol();
		when(entidadrolServiceMapper.mapEntidadrolEntityToEntidadrol(entidadrolEntity)).thenReturn(entidadrol);

		// When
		Entidadrol entidadrolFound = entidadrolService.findById(id);

		// Then
		assertEquals(entidadrol.getId(),entidadrolFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<EntidadrolEntity> entidadrolEntitys = new ArrayList<EntidadrolEntity>();
		EntidadrolEntity entidadrolEntity1 = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		entidadrolEntitys.add(entidadrolEntity1);
		EntidadrolEntity entidadrolEntity2 = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		entidadrolEntitys.add(entidadrolEntity2);
		when(entidadrolPersistenceJPA.loadAll()).thenReturn(entidadrolEntitys);
		
		Entidadrol entidadrol1 = entidadrolFactoryForTest.newEntidadrol();
		when(entidadrolServiceMapper.mapEntidadrolEntityToEntidadrol(entidadrolEntity1)).thenReturn(entidadrol1);
		Entidadrol entidadrol2 = entidadrolFactoryForTest.newEntidadrol();
		when(entidadrolServiceMapper.mapEntidadrolEntityToEntidadrol(entidadrolEntity2)).thenReturn(entidadrol2);

		// When
		List<Entidadrol> entidadrolsFounds = entidadrolService.findAll();

		// Then
		assertTrue(entidadrol1 == entidadrolsFounds.get(0));
		assertTrue(entidadrol2 == entidadrolsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Entidadrol entidadrol = entidadrolFactoryForTest.newEntidadrol();

		EntidadrolEntity entidadrolEntity = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		when(entidadrolPersistenceJPA.load(entidadrol.getId())).thenReturn(null);
		
		entidadrolEntity = new EntidadrolEntity();
		entidadrolServiceMapper.mapEntidadrolToEntidadrolEntity(entidadrol, entidadrolEntity);
		EntidadrolEntity entidadrolEntitySaved = entidadrolPersistenceJPA.save(entidadrolEntity);
		
		Entidadrol entidadrolSaved = entidadrolFactoryForTest.newEntidadrol();
		when(entidadrolServiceMapper.mapEntidadrolEntityToEntidadrol(entidadrolEntitySaved)).thenReturn(entidadrolSaved);

		// When
		Entidadrol entidadrolResult = entidadrolService.create(entidadrol);

		// Then
		assertTrue(entidadrolResult == entidadrolSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Entidadrol entidadrol = entidadrolFactoryForTest.newEntidadrol();

		EntidadrolEntity entidadrolEntity = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		when(entidadrolPersistenceJPA.load(entidadrol.getId())).thenReturn(entidadrolEntity);

		// When
		Exception exception = null;
		try {
			entidadrolService.create(entidadrol);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Entidadrol entidadrol = entidadrolFactoryForTest.newEntidadrol();

		EntidadrolEntity entidadrolEntity = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		when(entidadrolPersistenceJPA.load(entidadrol.getId())).thenReturn(entidadrolEntity);
		
		EntidadrolEntity entidadrolEntitySaved = entidadrolEntityFactoryForTest.newEntidadrolEntity();
		when(entidadrolPersistenceJPA.save(entidadrolEntity)).thenReturn(entidadrolEntitySaved);
		
		Entidadrol entidadrolSaved = entidadrolFactoryForTest.newEntidadrol();
		when(entidadrolServiceMapper.mapEntidadrolEntityToEntidadrol(entidadrolEntitySaved)).thenReturn(entidadrolSaved);

		// When
		Entidadrol entidadrolResult = entidadrolService.update(entidadrol);

		// Then
		verify(entidadrolServiceMapper).mapEntidadrolToEntidadrolEntity(entidadrol, entidadrolEntity);
		assertTrue(entidadrolResult == entidadrolSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		entidadrolService.delete(id);

		// Then
		verify(entidadrolPersistenceJPA).delete(id);
		
	}

}
