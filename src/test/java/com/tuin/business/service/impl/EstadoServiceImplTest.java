/*
 * Created on 28 ago 2017 ( Time 17:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Estado;
import com.tuin.bean.jpa.EstadoEntity;
import java.util.List;
import com.tuin.business.service.mapping.EstadoServiceMapper;
import com.tuin.persistence.services.jpa.EstadoPersistenceJPA;
import com.tuin.test.EstadoFactoryForTest;
import com.tuin.test.EstadoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EstadoService
 */
@RunWith(MockitoJUnitRunner.class)
public class EstadoServiceImplTest {

	@InjectMocks
	private EstadoServiceImpl estadoService;
	@Mock
	private EstadoPersistenceJPA estadoPersistenceJPA;
	@Mock
	private EstadoServiceMapper estadoServiceMapper;
	
	private EstadoFactoryForTest estadoFactoryForTest = new EstadoFactoryForTest();

	private EstadoEntityFactoryForTest estadoEntityFactoryForTest = new EstadoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		EstadoEntity estadoEntity = estadoPersistenceJPA.load(id);
		
		Estado estado = estadoFactoryForTest.newEstado();
		when(estadoServiceMapper.mapEstadoEntityToEstado(estadoEntity)).thenReturn(estado);

		// When
		Estado estadoFound = estadoService.findById(id);

		// Then
		assertEquals(estado.getId(),estadoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<EstadoEntity> estadoEntitys = new ArrayList<EstadoEntity>();
		EstadoEntity estadoEntity1 = estadoEntityFactoryForTest.newEstadoEntity();
		estadoEntitys.add(estadoEntity1);
		EstadoEntity estadoEntity2 = estadoEntityFactoryForTest.newEstadoEntity();
		estadoEntitys.add(estadoEntity2);
		when(estadoPersistenceJPA.loadAll()).thenReturn(estadoEntitys);
		
		Estado estado1 = estadoFactoryForTest.newEstado();
		when(estadoServiceMapper.mapEstadoEntityToEstado(estadoEntity1)).thenReturn(estado1);
		Estado estado2 = estadoFactoryForTest.newEstado();
		when(estadoServiceMapper.mapEstadoEntityToEstado(estadoEntity2)).thenReturn(estado2);

		// When
		List<Estado> estadosFounds = estadoService.findAll();

		// Then
		assertTrue(estado1 == estadosFounds.get(0));
		assertTrue(estado2 == estadosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Estado estado = estadoFactoryForTest.newEstado();

		EstadoEntity estadoEntity = estadoEntityFactoryForTest.newEstadoEntity();
		when(estadoPersistenceJPA.load(estado.getId())).thenReturn(null);
		
		estadoEntity = new EstadoEntity();
		estadoServiceMapper.mapEstadoToEstadoEntity(estado, estadoEntity);
		EstadoEntity estadoEntitySaved = estadoPersistenceJPA.save(estadoEntity);
		
		Estado estadoSaved = estadoFactoryForTest.newEstado();
		when(estadoServiceMapper.mapEstadoEntityToEstado(estadoEntitySaved)).thenReturn(estadoSaved);

		// When
		Estado estadoResult = estadoService.create(estado);

		// Then
		assertTrue(estadoResult == estadoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Estado estado = estadoFactoryForTest.newEstado();

		EstadoEntity estadoEntity = estadoEntityFactoryForTest.newEstadoEntity();
		when(estadoPersistenceJPA.load(estado.getId())).thenReturn(estadoEntity);

		// When
		Exception exception = null;
		try {
			estadoService.create(estado);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Estado estado = estadoFactoryForTest.newEstado();

		EstadoEntity estadoEntity = estadoEntityFactoryForTest.newEstadoEntity();
		when(estadoPersistenceJPA.load(estado.getId())).thenReturn(estadoEntity);
		
		EstadoEntity estadoEntitySaved = estadoEntityFactoryForTest.newEstadoEntity();
		when(estadoPersistenceJPA.save(estadoEntity)).thenReturn(estadoEntitySaved);
		
		Estado estadoSaved = estadoFactoryForTest.newEstado();
		when(estadoServiceMapper.mapEstadoEntityToEstado(estadoEntitySaved)).thenReturn(estadoSaved);

		// When
		Estado estadoResult = estadoService.update(estado);

		// Then
		verify(estadoServiceMapper).mapEstadoToEstadoEntity(estado, estadoEntity);
		assertTrue(estadoResult == estadoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		estadoService.delete(id);

		// Then
		verify(estadoPersistenceJPA).delete(id);
		
	}

}
