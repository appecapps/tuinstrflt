/*
 * Created on 28 ago 2017 ( Time 17:51:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Formapago;
import com.tuin.bean.jpa.FormapagoEntity;
import java.util.List;
import com.tuin.business.service.mapping.FormapagoServiceMapper;
import com.tuin.persistence.services.jpa.FormapagoPersistenceJPA;
import com.tuin.test.FormapagoFactoryForTest;
import com.tuin.test.FormapagoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of FormapagoService
 */
@RunWith(MockitoJUnitRunner.class)
public class FormapagoServiceImplTest {

	@InjectMocks
	private FormapagoServiceImpl formapagoService;
	@Mock
	private FormapagoPersistenceJPA formapagoPersistenceJPA;
	@Mock
	private FormapagoServiceMapper formapagoServiceMapper;
	
	private FormapagoFactoryForTest formapagoFactoryForTest = new FormapagoFactoryForTest();

	private FormapagoEntityFactoryForTest formapagoEntityFactoryForTest = new FormapagoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		FormapagoEntity formapagoEntity = formapagoPersistenceJPA.load(id);
		
		Formapago formapago = formapagoFactoryForTest.newFormapago();
		when(formapagoServiceMapper.mapFormapagoEntityToFormapago(formapagoEntity)).thenReturn(formapago);

		// When
		Formapago formapagoFound = formapagoService.findById(id);

		// Then
		assertEquals(formapago.getId(),formapagoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<FormapagoEntity> formapagoEntitys = new ArrayList<FormapagoEntity>();
		FormapagoEntity formapagoEntity1 = formapagoEntityFactoryForTest.newFormapagoEntity();
		formapagoEntitys.add(formapagoEntity1);
		FormapagoEntity formapagoEntity2 = formapagoEntityFactoryForTest.newFormapagoEntity();
		formapagoEntitys.add(formapagoEntity2);
		when(formapagoPersistenceJPA.loadAll()).thenReturn(formapagoEntitys);
		
		Formapago formapago1 = formapagoFactoryForTest.newFormapago();
		when(formapagoServiceMapper.mapFormapagoEntityToFormapago(formapagoEntity1)).thenReturn(formapago1);
		Formapago formapago2 = formapagoFactoryForTest.newFormapago();
		when(formapagoServiceMapper.mapFormapagoEntityToFormapago(formapagoEntity2)).thenReturn(formapago2);

		// When
		List<Formapago> formapagosFounds = formapagoService.findAll();

		// Then
		assertTrue(formapago1 == formapagosFounds.get(0));
		assertTrue(formapago2 == formapagosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Formapago formapago = formapagoFactoryForTest.newFormapago();

		FormapagoEntity formapagoEntity = formapagoEntityFactoryForTest.newFormapagoEntity();
		when(formapagoPersistenceJPA.load(formapago.getId())).thenReturn(null);
		
		formapagoEntity = new FormapagoEntity();
		formapagoServiceMapper.mapFormapagoToFormapagoEntity(formapago, formapagoEntity);
		FormapagoEntity formapagoEntitySaved = formapagoPersistenceJPA.save(formapagoEntity);
		
		Formapago formapagoSaved = formapagoFactoryForTest.newFormapago();
		when(formapagoServiceMapper.mapFormapagoEntityToFormapago(formapagoEntitySaved)).thenReturn(formapagoSaved);

		// When
		Formapago formapagoResult = formapagoService.create(formapago);

		// Then
		assertTrue(formapagoResult == formapagoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Formapago formapago = formapagoFactoryForTest.newFormapago();

		FormapagoEntity formapagoEntity = formapagoEntityFactoryForTest.newFormapagoEntity();
		when(formapagoPersistenceJPA.load(formapago.getId())).thenReturn(formapagoEntity);

		// When
		Exception exception = null;
		try {
			formapagoService.create(formapago);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Formapago formapago = formapagoFactoryForTest.newFormapago();

		FormapagoEntity formapagoEntity = formapagoEntityFactoryForTest.newFormapagoEntity();
		when(formapagoPersistenceJPA.load(formapago.getId())).thenReturn(formapagoEntity);
		
		FormapagoEntity formapagoEntitySaved = formapagoEntityFactoryForTest.newFormapagoEntity();
		when(formapagoPersistenceJPA.save(formapagoEntity)).thenReturn(formapagoEntitySaved);
		
		Formapago formapagoSaved = formapagoFactoryForTest.newFormapago();
		when(formapagoServiceMapper.mapFormapagoEntityToFormapago(formapagoEntitySaved)).thenReturn(formapagoSaved);

		// When
		Formapago formapagoResult = formapagoService.update(formapago);

		// Then
		verify(formapagoServiceMapper).mapFormapagoToFormapagoEntity(formapago, formapagoEntity);
		assertTrue(formapagoResult == formapagoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		formapagoService.delete(id);

		// Then
		verify(formapagoPersistenceJPA).delete(id);
		
	}

}
