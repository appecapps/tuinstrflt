/*
 * Created on 28 ago 2017 ( Time 17:51:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Formapagodocumento;
import com.tuin.bean.jpa.FormapagodocumentoEntity;
import com.tuin.business.service.mapping.FormapagodocumentoServiceMapper;
import com.tuin.persistence.services.jpa.FormapagodocumentoPersistenceJPA;
import com.tuin.test.FormapagodocumentoFactoryForTest;
import com.tuin.test.FormapagodocumentoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of FormapagodocumentoService
 */
@RunWith(MockitoJUnitRunner.class)
public class FormapagodocumentoServiceImplTest {

	@InjectMocks
	private FormapagodocumentoServiceImpl formapagodocumentoService;
	@Mock
	private FormapagodocumentoPersistenceJPA formapagodocumentoPersistenceJPA;
	@Mock
	private FormapagodocumentoServiceMapper formapagodocumentoServiceMapper;
	
	private FormapagodocumentoFactoryForTest formapagodocumentoFactoryForTest = new FormapagodocumentoFactoryForTest();

	private FormapagodocumentoEntityFactoryForTest formapagodocumentoEntityFactoryForTest = new FormapagodocumentoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		FormapagodocumentoEntity formapagodocumentoEntity = formapagodocumentoPersistenceJPA.load(id);
		
		Formapagodocumento formapagodocumento = formapagodocumentoFactoryForTest.newFormapagodocumento();
		when(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntity)).thenReturn(formapagodocumento);

		// When
		Formapagodocumento formapagodocumentoFound = formapagodocumentoService.findById(id);

		// Then
		assertEquals(formapagodocumento.getId(),formapagodocumentoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<FormapagodocumentoEntity> formapagodocumentoEntitys = new ArrayList<FormapagodocumentoEntity>();
		FormapagodocumentoEntity formapagodocumentoEntity1 = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		formapagodocumentoEntitys.add(formapagodocumentoEntity1);
		FormapagodocumentoEntity formapagodocumentoEntity2 = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		formapagodocumentoEntitys.add(formapagodocumentoEntity2);
		when(formapagodocumentoPersistenceJPA.loadAll()).thenReturn(formapagodocumentoEntitys);
		
		Formapagodocumento formapagodocumento1 = formapagodocumentoFactoryForTest.newFormapagodocumento();
		when(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntity1)).thenReturn(formapagodocumento1);
		Formapagodocumento formapagodocumento2 = formapagodocumentoFactoryForTest.newFormapagodocumento();
		when(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntity2)).thenReturn(formapagodocumento2);

		// When
		List<Formapagodocumento> formapagodocumentosFounds = formapagodocumentoService.findAll();

		// Then
		assertTrue(formapagodocumento1 == formapagodocumentosFounds.get(0));
		assertTrue(formapagodocumento2 == formapagodocumentosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Formapagodocumento formapagodocumento = formapagodocumentoFactoryForTest.newFormapagodocumento();

		FormapagodocumentoEntity formapagodocumentoEntity = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		when(formapagodocumentoPersistenceJPA.load(formapagodocumento.getId())).thenReturn(null);
		
		formapagodocumentoEntity = new FormapagodocumentoEntity();
		formapagodocumentoServiceMapper.mapFormapagodocumentoToFormapagodocumentoEntity(formapagodocumento, formapagodocumentoEntity);
		FormapagodocumentoEntity formapagodocumentoEntitySaved = formapagodocumentoPersistenceJPA.save(formapagodocumentoEntity);
		
		Formapagodocumento formapagodocumentoSaved = formapagodocumentoFactoryForTest.newFormapagodocumento();
		when(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntitySaved)).thenReturn(formapagodocumentoSaved);

		// When
		Formapagodocumento formapagodocumentoResult = formapagodocumentoService.create(formapagodocumento);

		// Then
		assertTrue(formapagodocumentoResult == formapagodocumentoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Formapagodocumento formapagodocumento = formapagodocumentoFactoryForTest.newFormapagodocumento();

		FormapagodocumentoEntity formapagodocumentoEntity = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		when(formapagodocumentoPersistenceJPA.load(formapagodocumento.getId())).thenReturn(formapagodocumentoEntity);

		// When
		Exception exception = null;
		try {
			formapagodocumentoService.create(formapagodocumento);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Formapagodocumento formapagodocumento = formapagodocumentoFactoryForTest.newFormapagodocumento();

		FormapagodocumentoEntity formapagodocumentoEntity = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		when(formapagodocumentoPersistenceJPA.load(formapagodocumento.getId())).thenReturn(formapagodocumentoEntity);
		
		FormapagodocumentoEntity formapagodocumentoEntitySaved = formapagodocumentoEntityFactoryForTest.newFormapagodocumentoEntity();
		when(formapagodocumentoPersistenceJPA.save(formapagodocumentoEntity)).thenReturn(formapagodocumentoEntitySaved);
		
		Formapagodocumento formapagodocumentoSaved = formapagodocumentoFactoryForTest.newFormapagodocumento();
		when(formapagodocumentoServiceMapper.mapFormapagodocumentoEntityToFormapagodocumento(formapagodocumentoEntitySaved)).thenReturn(formapagodocumentoSaved);

		// When
		Formapagodocumento formapagodocumentoResult = formapagodocumentoService.update(formapagodocumento);

		// Then
		verify(formapagodocumentoServiceMapper).mapFormapagodocumentoToFormapagodocumentoEntity(formapagodocumento, formapagodocumentoEntity);
		assertTrue(formapagodocumentoResult == formapagodocumentoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		formapagodocumentoService.delete(id);

		// Then
		verify(formapagodocumentoPersistenceJPA).delete(id);
		
	}

}
