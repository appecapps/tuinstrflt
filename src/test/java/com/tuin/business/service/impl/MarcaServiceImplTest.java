/*
 * Created on 28 ago 2017 ( Time 17:51:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Marca;
import com.tuin.bean.jpa.MarcaEntity;
import java.util.List;
import com.tuin.business.service.mapping.MarcaServiceMapper;
import com.tuin.persistence.services.jpa.MarcaPersistenceJPA;
import com.tuin.test.MarcaFactoryForTest;
import com.tuin.test.MarcaEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of MarcaService
 */
@RunWith(MockitoJUnitRunner.class)
public class MarcaServiceImplTest {

	@InjectMocks
	private MarcaServiceImpl marcaService;
	@Mock
	private MarcaPersistenceJPA marcaPersistenceJPA;
	@Mock
	private MarcaServiceMapper marcaServiceMapper;
	
	private MarcaFactoryForTest marcaFactoryForTest = new MarcaFactoryForTest();

	private MarcaEntityFactoryForTest marcaEntityFactoryForTest = new MarcaEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		MarcaEntity marcaEntity = marcaPersistenceJPA.load(id);
		
		Marca marca = marcaFactoryForTest.newMarca();
		when(marcaServiceMapper.mapMarcaEntityToMarca(marcaEntity)).thenReturn(marca);

		// When
		Marca marcaFound = marcaService.findById(id);

		// Then
		assertEquals(marca.getId(),marcaFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<MarcaEntity> marcaEntitys = new ArrayList<MarcaEntity>();
		MarcaEntity marcaEntity1 = marcaEntityFactoryForTest.newMarcaEntity();
		marcaEntitys.add(marcaEntity1);
		MarcaEntity marcaEntity2 = marcaEntityFactoryForTest.newMarcaEntity();
		marcaEntitys.add(marcaEntity2);
		when(marcaPersistenceJPA.loadAll()).thenReturn(marcaEntitys);
		
		Marca marca1 = marcaFactoryForTest.newMarca();
		when(marcaServiceMapper.mapMarcaEntityToMarca(marcaEntity1)).thenReturn(marca1);
		Marca marca2 = marcaFactoryForTest.newMarca();
		when(marcaServiceMapper.mapMarcaEntityToMarca(marcaEntity2)).thenReturn(marca2);

		// When
		List<Marca> marcasFounds = marcaService.findAll();

		// Then
		assertTrue(marca1 == marcasFounds.get(0));
		assertTrue(marca2 == marcasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Marca marca = marcaFactoryForTest.newMarca();

		MarcaEntity marcaEntity = marcaEntityFactoryForTest.newMarcaEntity();
		when(marcaPersistenceJPA.load(marca.getId())).thenReturn(null);
		
		marcaEntity = new MarcaEntity();
		marcaServiceMapper.mapMarcaToMarcaEntity(marca, marcaEntity);
		MarcaEntity marcaEntitySaved = marcaPersistenceJPA.save(marcaEntity);
		
		Marca marcaSaved = marcaFactoryForTest.newMarca();
		when(marcaServiceMapper.mapMarcaEntityToMarca(marcaEntitySaved)).thenReturn(marcaSaved);

		// When
		Marca marcaResult = marcaService.create(marca);

		// Then
		assertTrue(marcaResult == marcaSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Marca marca = marcaFactoryForTest.newMarca();

		MarcaEntity marcaEntity = marcaEntityFactoryForTest.newMarcaEntity();
		when(marcaPersistenceJPA.load(marca.getId())).thenReturn(marcaEntity);

		// When
		Exception exception = null;
		try {
			marcaService.create(marca);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Marca marca = marcaFactoryForTest.newMarca();

		MarcaEntity marcaEntity = marcaEntityFactoryForTest.newMarcaEntity();
		when(marcaPersistenceJPA.load(marca.getId())).thenReturn(marcaEntity);
		
		MarcaEntity marcaEntitySaved = marcaEntityFactoryForTest.newMarcaEntity();
		when(marcaPersistenceJPA.save(marcaEntity)).thenReturn(marcaEntitySaved);
		
		Marca marcaSaved = marcaFactoryForTest.newMarca();
		when(marcaServiceMapper.mapMarcaEntityToMarca(marcaEntitySaved)).thenReturn(marcaSaved);

		// When
		Marca marcaResult = marcaService.update(marca);

		// Then
		verify(marcaServiceMapper).mapMarcaToMarcaEntity(marca, marcaEntity);
		assertTrue(marcaResult == marcaSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		marcaService.delete(id);

		// Then
		verify(marcaPersistenceJPA).delete(id);
		
	}

}
