/*
 * Created on 28 ago 2017 ( Time 17:51:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Rolitemmenu;
import com.tuin.bean.jpa.RolitemmenuEntity;
import com.tuin.business.service.mapping.RolitemmenuServiceMapper;
import com.tuin.persistence.services.jpa.RolitemmenuPersistenceJPA;
import com.tuin.test.RolitemmenuFactoryForTest;
import com.tuin.test.RolitemmenuEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RolitemmenuService
 */
@RunWith(MockitoJUnitRunner.class)
public class RolitemmenuServiceImplTest {

	@InjectMocks
	private RolitemmenuServiceImpl rolitemmenuService;
	@Mock
	private RolitemmenuPersistenceJPA rolitemmenuPersistenceJPA;
	@Mock
	private RolitemmenuServiceMapper rolitemmenuServiceMapper;
	
	private RolitemmenuFactoryForTest rolitemmenuFactoryForTest = new RolitemmenuFactoryForTest();

	private RolitemmenuEntityFactoryForTest rolitemmenuEntityFactoryForTest = new RolitemmenuEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		RolitemmenuEntity rolitemmenuEntity = rolitemmenuPersistenceJPA.load(id);
		
		Rolitemmenu rolitemmenu = rolitemmenuFactoryForTest.newRolitemmenu();
		when(rolitemmenuServiceMapper.mapRolitemmenuEntityToRolitemmenu(rolitemmenuEntity)).thenReturn(rolitemmenu);

		// When
		Rolitemmenu rolitemmenuFound = rolitemmenuService.findById(id);

		// Then
		assertEquals(rolitemmenu.getId(),rolitemmenuFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<RolitemmenuEntity> rolitemmenuEntitys = new ArrayList<RolitemmenuEntity>();
		RolitemmenuEntity rolitemmenuEntity1 = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		rolitemmenuEntitys.add(rolitemmenuEntity1);
		RolitemmenuEntity rolitemmenuEntity2 = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		rolitemmenuEntitys.add(rolitemmenuEntity2);
		when(rolitemmenuPersistenceJPA.loadAll()).thenReturn(rolitemmenuEntitys);
		
		Rolitemmenu rolitemmenu1 = rolitemmenuFactoryForTest.newRolitemmenu();
		when(rolitemmenuServiceMapper.mapRolitemmenuEntityToRolitemmenu(rolitemmenuEntity1)).thenReturn(rolitemmenu1);
		Rolitemmenu rolitemmenu2 = rolitemmenuFactoryForTest.newRolitemmenu();
		when(rolitemmenuServiceMapper.mapRolitemmenuEntityToRolitemmenu(rolitemmenuEntity2)).thenReturn(rolitemmenu2);

		// When
		List<Rolitemmenu> rolitemmenusFounds = rolitemmenuService.findAll();

		// Then
		assertTrue(rolitemmenu1 == rolitemmenusFounds.get(0));
		assertTrue(rolitemmenu2 == rolitemmenusFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Rolitemmenu rolitemmenu = rolitemmenuFactoryForTest.newRolitemmenu();

		RolitemmenuEntity rolitemmenuEntity = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		when(rolitemmenuPersistenceJPA.load(rolitemmenu.getId())).thenReturn(null);
		
		rolitemmenuEntity = new RolitemmenuEntity();
		rolitemmenuServiceMapper.mapRolitemmenuToRolitemmenuEntity(rolitemmenu, rolitemmenuEntity);
		RolitemmenuEntity rolitemmenuEntitySaved = rolitemmenuPersistenceJPA.save(rolitemmenuEntity);
		
		Rolitemmenu rolitemmenuSaved = rolitemmenuFactoryForTest.newRolitemmenu();
		when(rolitemmenuServiceMapper.mapRolitemmenuEntityToRolitemmenu(rolitemmenuEntitySaved)).thenReturn(rolitemmenuSaved);

		// When
		Rolitemmenu rolitemmenuResult = rolitemmenuService.create(rolitemmenu);

		// Then
		assertTrue(rolitemmenuResult == rolitemmenuSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Rolitemmenu rolitemmenu = rolitemmenuFactoryForTest.newRolitemmenu();

		RolitemmenuEntity rolitemmenuEntity = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		when(rolitemmenuPersistenceJPA.load(rolitemmenu.getId())).thenReturn(rolitemmenuEntity);

		// When
		Exception exception = null;
		try {
			rolitemmenuService.create(rolitemmenu);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Rolitemmenu rolitemmenu = rolitemmenuFactoryForTest.newRolitemmenu();

		RolitemmenuEntity rolitemmenuEntity = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		when(rolitemmenuPersistenceJPA.load(rolitemmenu.getId())).thenReturn(rolitemmenuEntity);
		
		RolitemmenuEntity rolitemmenuEntitySaved = rolitemmenuEntityFactoryForTest.newRolitemmenuEntity();
		when(rolitemmenuPersistenceJPA.save(rolitemmenuEntity)).thenReturn(rolitemmenuEntitySaved);
		
		Rolitemmenu rolitemmenuSaved = rolitemmenuFactoryForTest.newRolitemmenu();
		when(rolitemmenuServiceMapper.mapRolitemmenuEntityToRolitemmenu(rolitemmenuEntitySaved)).thenReturn(rolitemmenuSaved);

		// When
		Rolitemmenu rolitemmenuResult = rolitemmenuService.update(rolitemmenu);

		// Then
		verify(rolitemmenuServiceMapper).mapRolitemmenuToRolitemmenuEntity(rolitemmenu, rolitemmenuEntity);
		assertTrue(rolitemmenuResult == rolitemmenuSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		rolitemmenuService.delete(id);

		// Then
		verify(rolitemmenuPersistenceJPA).delete(id);
		
	}

}
