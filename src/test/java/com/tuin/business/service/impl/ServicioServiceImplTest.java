/*
 * Created on 28 ago 2017 ( Time 17:51:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Servicio;
import com.tuin.bean.jpa.ServicioEntity;
import java.util.List;
import com.tuin.business.service.mapping.ServicioServiceMapper;
import com.tuin.persistence.services.jpa.ServicioPersistenceJPA;
import com.tuin.test.ServicioFactoryForTest;
import com.tuin.test.ServicioEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ServicioService
 */
@RunWith(MockitoJUnitRunner.class)
public class ServicioServiceImplTest {

	@InjectMocks
	private ServicioServiceImpl servicioService;
	@Mock
	private ServicioPersistenceJPA servicioPersistenceJPA;
	@Mock
	private ServicioServiceMapper servicioServiceMapper;
	
	private ServicioFactoryForTest servicioFactoryForTest = new ServicioFactoryForTest();

	private ServicioEntityFactoryForTest servicioEntityFactoryForTest = new ServicioEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ServicioEntity servicioEntity = servicioPersistenceJPA.load(id);
		
		Servicio servicio = servicioFactoryForTest.newServicio();
		when(servicioServiceMapper.mapServicioEntityToServicio(servicioEntity)).thenReturn(servicio);

		// When
		Servicio servicioFound = servicioService.findById(id);

		// Then
		assertEquals(servicio.getId(),servicioFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ServicioEntity> servicioEntitys = new ArrayList<ServicioEntity>();
		ServicioEntity servicioEntity1 = servicioEntityFactoryForTest.newServicioEntity();
		servicioEntitys.add(servicioEntity1);
		ServicioEntity servicioEntity2 = servicioEntityFactoryForTest.newServicioEntity();
		servicioEntitys.add(servicioEntity2);
		when(servicioPersistenceJPA.loadAll()).thenReturn(servicioEntitys);
		
		Servicio servicio1 = servicioFactoryForTest.newServicio();
		when(servicioServiceMapper.mapServicioEntityToServicio(servicioEntity1)).thenReturn(servicio1);
		Servicio servicio2 = servicioFactoryForTest.newServicio();
		when(servicioServiceMapper.mapServicioEntityToServicio(servicioEntity2)).thenReturn(servicio2);

		// When
		List<Servicio> serviciosFounds = servicioService.findAll();

		// Then
		assertTrue(servicio1 == serviciosFounds.get(0));
		assertTrue(servicio2 == serviciosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Servicio servicio = servicioFactoryForTest.newServicio();

		ServicioEntity servicioEntity = servicioEntityFactoryForTest.newServicioEntity();
		when(servicioPersistenceJPA.load(servicio.getId())).thenReturn(null);
		
		servicioEntity = new ServicioEntity();
		servicioServiceMapper.mapServicioToServicioEntity(servicio, servicioEntity);
		ServicioEntity servicioEntitySaved = servicioPersistenceJPA.save(servicioEntity);
		
		Servicio servicioSaved = servicioFactoryForTest.newServicio();
		when(servicioServiceMapper.mapServicioEntityToServicio(servicioEntitySaved)).thenReturn(servicioSaved);

		// When
		Servicio servicioResult = servicioService.create(servicio);

		// Then
		assertTrue(servicioResult == servicioSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Servicio servicio = servicioFactoryForTest.newServicio();

		ServicioEntity servicioEntity = servicioEntityFactoryForTest.newServicioEntity();
		when(servicioPersistenceJPA.load(servicio.getId())).thenReturn(servicioEntity);

		// When
		Exception exception = null;
		try {
			servicioService.create(servicio);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Servicio servicio = servicioFactoryForTest.newServicio();

		ServicioEntity servicioEntity = servicioEntityFactoryForTest.newServicioEntity();
		when(servicioPersistenceJPA.load(servicio.getId())).thenReturn(servicioEntity);
		
		ServicioEntity servicioEntitySaved = servicioEntityFactoryForTest.newServicioEntity();
		when(servicioPersistenceJPA.save(servicioEntity)).thenReturn(servicioEntitySaved);
		
		Servicio servicioSaved = servicioFactoryForTest.newServicio();
		when(servicioServiceMapper.mapServicioEntityToServicio(servicioEntitySaved)).thenReturn(servicioSaved);

		// When
		Servicio servicioResult = servicioService.update(servicio);

		// Then
		verify(servicioServiceMapper).mapServicioToServicioEntity(servicio, servicioEntity);
		assertTrue(servicioResult == servicioSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		servicioService.delete(id);

		// Then
		verify(servicioPersistenceJPA).delete(id);
		
	}

}
