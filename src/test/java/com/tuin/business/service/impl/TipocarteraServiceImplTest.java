/*
 * Created on 28 ago 2017 ( Time 17:51:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Tipocartera;
import com.tuin.bean.jpa.TipocarteraEntity;
import java.util.List;
import com.tuin.business.service.mapping.TipocarteraServiceMapper;
import com.tuin.persistence.services.jpa.TipocarteraPersistenceJPA;
import com.tuin.test.TipocarteraFactoryForTest;
import com.tuin.test.TipocarteraEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TipocarteraService
 */
@RunWith(MockitoJUnitRunner.class)
public class TipocarteraServiceImplTest {

	@InjectMocks
	private TipocarteraServiceImpl tipocarteraService;
	@Mock
	private TipocarteraPersistenceJPA tipocarteraPersistenceJPA;
	@Mock
	private TipocarteraServiceMapper tipocarteraServiceMapper;
	
	private TipocarteraFactoryForTest tipocarteraFactoryForTest = new TipocarteraFactoryForTest();

	private TipocarteraEntityFactoryForTest tipocarteraEntityFactoryForTest = new TipocarteraEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		TipocarteraEntity tipocarteraEntity = tipocarteraPersistenceJPA.load(id);
		
		Tipocartera tipocartera = tipocarteraFactoryForTest.newTipocartera();
		when(tipocarteraServiceMapper.mapTipocarteraEntityToTipocartera(tipocarteraEntity)).thenReturn(tipocartera);

		// When
		Tipocartera tipocarteraFound = tipocarteraService.findById(id);

		// Then
		assertEquals(tipocartera.getId(),tipocarteraFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TipocarteraEntity> tipocarteraEntitys = new ArrayList<TipocarteraEntity>();
		TipocarteraEntity tipocarteraEntity1 = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		tipocarteraEntitys.add(tipocarteraEntity1);
		TipocarteraEntity tipocarteraEntity2 = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		tipocarteraEntitys.add(tipocarteraEntity2);
		when(tipocarteraPersistenceJPA.loadAll()).thenReturn(tipocarteraEntitys);
		
		Tipocartera tipocartera1 = tipocarteraFactoryForTest.newTipocartera();
		when(tipocarteraServiceMapper.mapTipocarteraEntityToTipocartera(tipocarteraEntity1)).thenReturn(tipocartera1);
		Tipocartera tipocartera2 = tipocarteraFactoryForTest.newTipocartera();
		when(tipocarteraServiceMapper.mapTipocarteraEntityToTipocartera(tipocarteraEntity2)).thenReturn(tipocartera2);

		// When
		List<Tipocartera> tipocarterasFounds = tipocarteraService.findAll();

		// Then
		assertTrue(tipocartera1 == tipocarterasFounds.get(0));
		assertTrue(tipocartera2 == tipocarterasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Tipocartera tipocartera = tipocarteraFactoryForTest.newTipocartera();

		TipocarteraEntity tipocarteraEntity = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		when(tipocarteraPersistenceJPA.load(tipocartera.getId())).thenReturn(null);
		
		tipocarteraEntity = new TipocarteraEntity();
		tipocarteraServiceMapper.mapTipocarteraToTipocarteraEntity(tipocartera, tipocarteraEntity);
		TipocarteraEntity tipocarteraEntitySaved = tipocarteraPersistenceJPA.save(tipocarteraEntity);
		
		Tipocartera tipocarteraSaved = tipocarteraFactoryForTest.newTipocartera();
		when(tipocarteraServiceMapper.mapTipocarteraEntityToTipocartera(tipocarteraEntitySaved)).thenReturn(tipocarteraSaved);

		// When
		Tipocartera tipocarteraResult = tipocarteraService.create(tipocartera);

		// Then
		assertTrue(tipocarteraResult == tipocarteraSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Tipocartera tipocartera = tipocarteraFactoryForTest.newTipocartera();

		TipocarteraEntity tipocarteraEntity = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		when(tipocarteraPersistenceJPA.load(tipocartera.getId())).thenReturn(tipocarteraEntity);

		// When
		Exception exception = null;
		try {
			tipocarteraService.create(tipocartera);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Tipocartera tipocartera = tipocarteraFactoryForTest.newTipocartera();

		TipocarteraEntity tipocarteraEntity = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		when(tipocarteraPersistenceJPA.load(tipocartera.getId())).thenReturn(tipocarteraEntity);
		
		TipocarteraEntity tipocarteraEntitySaved = tipocarteraEntityFactoryForTest.newTipocarteraEntity();
		when(tipocarteraPersistenceJPA.save(tipocarteraEntity)).thenReturn(tipocarteraEntitySaved);
		
		Tipocartera tipocarteraSaved = tipocarteraFactoryForTest.newTipocartera();
		when(tipocarteraServiceMapper.mapTipocarteraEntityToTipocartera(tipocarteraEntitySaved)).thenReturn(tipocarteraSaved);

		// When
		Tipocartera tipocarteraResult = tipocarteraService.update(tipocartera);

		// Then
		verify(tipocarteraServiceMapper).mapTipocarteraToTipocarteraEntity(tipocartera, tipocarteraEntity);
		assertTrue(tipocarteraResult == tipocarteraSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		tipocarteraService.delete(id);

		// Then
		verify(tipocarteraPersistenceJPA).delete(id);
		
	}

}
