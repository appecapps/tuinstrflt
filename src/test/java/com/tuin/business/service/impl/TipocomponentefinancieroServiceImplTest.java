/*
 * Created on 28 ago 2017 ( Time 17:51:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Tipocomponentefinanciero;
import com.tuin.bean.jpa.TipocomponentefinancieroEntity;
import java.util.List;
import com.tuin.business.service.mapping.TipocomponentefinancieroServiceMapper;
import com.tuin.persistence.services.jpa.TipocomponentefinancieroPersistenceJPA;
import com.tuin.test.TipocomponentefinancieroFactoryForTest;
import com.tuin.test.TipocomponentefinancieroEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TipocomponentefinancieroService
 */
@RunWith(MockitoJUnitRunner.class)
public class TipocomponentefinancieroServiceImplTest {

	@InjectMocks
	private TipocomponentefinancieroServiceImpl tipocomponentefinancieroService;
	@Mock
	private TipocomponentefinancieroPersistenceJPA tipocomponentefinancieroPersistenceJPA;
	@Mock
	private TipocomponentefinancieroServiceMapper tipocomponentefinancieroServiceMapper;
	
	private TipocomponentefinancieroFactoryForTest tipocomponentefinancieroFactoryForTest = new TipocomponentefinancieroFactoryForTest();

	private TipocomponentefinancieroEntityFactoryForTest tipocomponentefinancieroEntityFactoryForTest = new TipocomponentefinancieroEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		TipocomponentefinancieroEntity tipocomponentefinancieroEntity = tipocomponentefinancieroPersistenceJPA.load(id);
		
		Tipocomponentefinanciero tipocomponentefinanciero = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();
		when(tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroEntityToTipocomponentefinanciero(tipocomponentefinancieroEntity)).thenReturn(tipocomponentefinanciero);

		// When
		Tipocomponentefinanciero tipocomponentefinancieroFound = tipocomponentefinancieroService.findById(id);

		// Then
		assertEquals(tipocomponentefinanciero.getId(),tipocomponentefinancieroFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TipocomponentefinancieroEntity> tipocomponentefinancieroEntitys = new ArrayList<TipocomponentefinancieroEntity>();
		TipocomponentefinancieroEntity tipocomponentefinancieroEntity1 = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		tipocomponentefinancieroEntitys.add(tipocomponentefinancieroEntity1);
		TipocomponentefinancieroEntity tipocomponentefinancieroEntity2 = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		tipocomponentefinancieroEntitys.add(tipocomponentefinancieroEntity2);
		when(tipocomponentefinancieroPersistenceJPA.loadAll()).thenReturn(tipocomponentefinancieroEntitys);
		
		Tipocomponentefinanciero tipocomponentefinanciero1 = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();
		when(tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroEntityToTipocomponentefinanciero(tipocomponentefinancieroEntity1)).thenReturn(tipocomponentefinanciero1);
		Tipocomponentefinanciero tipocomponentefinanciero2 = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();
		when(tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroEntityToTipocomponentefinanciero(tipocomponentefinancieroEntity2)).thenReturn(tipocomponentefinanciero2);

		// When
		List<Tipocomponentefinanciero> tipocomponentefinancierosFounds = tipocomponentefinancieroService.findAll();

		// Then
		assertTrue(tipocomponentefinanciero1 == tipocomponentefinancierosFounds.get(0));
		assertTrue(tipocomponentefinanciero2 == tipocomponentefinancierosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Tipocomponentefinanciero tipocomponentefinanciero = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();

		TipocomponentefinancieroEntity tipocomponentefinancieroEntity = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		when(tipocomponentefinancieroPersistenceJPA.load(tipocomponentefinanciero.getId())).thenReturn(null);
		
		tipocomponentefinancieroEntity = new TipocomponentefinancieroEntity();
		tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroToTipocomponentefinancieroEntity(tipocomponentefinanciero, tipocomponentefinancieroEntity);
		TipocomponentefinancieroEntity tipocomponentefinancieroEntitySaved = tipocomponentefinancieroPersistenceJPA.save(tipocomponentefinancieroEntity);
		
		Tipocomponentefinanciero tipocomponentefinancieroSaved = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();
		when(tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroEntityToTipocomponentefinanciero(tipocomponentefinancieroEntitySaved)).thenReturn(tipocomponentefinancieroSaved);

		// When
		Tipocomponentefinanciero tipocomponentefinancieroResult = tipocomponentefinancieroService.create(tipocomponentefinanciero);

		// Then
		assertTrue(tipocomponentefinancieroResult == tipocomponentefinancieroSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Tipocomponentefinanciero tipocomponentefinanciero = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();

		TipocomponentefinancieroEntity tipocomponentefinancieroEntity = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		when(tipocomponentefinancieroPersistenceJPA.load(tipocomponentefinanciero.getId())).thenReturn(tipocomponentefinancieroEntity);

		// When
		Exception exception = null;
		try {
			tipocomponentefinancieroService.create(tipocomponentefinanciero);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Tipocomponentefinanciero tipocomponentefinanciero = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();

		TipocomponentefinancieroEntity tipocomponentefinancieroEntity = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		when(tipocomponentefinancieroPersistenceJPA.load(tipocomponentefinanciero.getId())).thenReturn(tipocomponentefinancieroEntity);
		
		TipocomponentefinancieroEntity tipocomponentefinancieroEntitySaved = tipocomponentefinancieroEntityFactoryForTest.newTipocomponentefinancieroEntity();
		when(tipocomponentefinancieroPersistenceJPA.save(tipocomponentefinancieroEntity)).thenReturn(tipocomponentefinancieroEntitySaved);
		
		Tipocomponentefinanciero tipocomponentefinancieroSaved = tipocomponentefinancieroFactoryForTest.newTipocomponentefinanciero();
		when(tipocomponentefinancieroServiceMapper.mapTipocomponentefinancieroEntityToTipocomponentefinanciero(tipocomponentefinancieroEntitySaved)).thenReturn(tipocomponentefinancieroSaved);

		// When
		Tipocomponentefinanciero tipocomponentefinancieroResult = tipocomponentefinancieroService.update(tipocomponentefinanciero);

		// Then
		verify(tipocomponentefinancieroServiceMapper).mapTipocomponentefinancieroToTipocomponentefinancieroEntity(tipocomponentefinanciero, tipocomponentefinancieroEntity);
		assertTrue(tipocomponentefinancieroResult == tipocomponentefinancieroSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		tipocomponentefinancieroService.delete(id);

		// Then
		verify(tipocomponentefinancieroPersistenceJPA).delete(id);
		
	}

}
