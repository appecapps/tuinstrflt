/*
 * Created on 28 ago 2017 ( Time 17:51:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Tipodocumento;
import com.tuin.bean.jpa.TipodocumentoEntity;
import java.util.List;
import com.tuin.business.service.mapping.TipodocumentoServiceMapper;
import com.tuin.persistence.services.jpa.TipodocumentoPersistenceJPA;
import com.tuin.test.TipodocumentoFactoryForTest;
import com.tuin.test.TipodocumentoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TipodocumentoService
 */
@RunWith(MockitoJUnitRunner.class)
public class TipodocumentoServiceImplTest {

	@InjectMocks
	private TipodocumentoServiceImpl tipodocumentoService;
	@Mock
	private TipodocumentoPersistenceJPA tipodocumentoPersistenceJPA;
	@Mock
	private TipodocumentoServiceMapper tipodocumentoServiceMapper;
	
	private TipodocumentoFactoryForTest tipodocumentoFactoryForTest = new TipodocumentoFactoryForTest();

	private TipodocumentoEntityFactoryForTest tipodocumentoEntityFactoryForTest = new TipodocumentoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		TipodocumentoEntity tipodocumentoEntity = tipodocumentoPersistenceJPA.load(id);
		
		Tipodocumento tipodocumento = tipodocumentoFactoryForTest.newTipodocumento();
		when(tipodocumentoServiceMapper.mapTipodocumentoEntityToTipodocumento(tipodocumentoEntity)).thenReturn(tipodocumento);

		// When
		Tipodocumento tipodocumentoFound = tipodocumentoService.findById(id);

		// Then
		assertEquals(tipodocumento.getId(),tipodocumentoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TipodocumentoEntity> tipodocumentoEntitys = new ArrayList<TipodocumentoEntity>();
		TipodocumentoEntity tipodocumentoEntity1 = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		tipodocumentoEntitys.add(tipodocumentoEntity1);
		TipodocumentoEntity tipodocumentoEntity2 = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		tipodocumentoEntitys.add(tipodocumentoEntity2);
		when(tipodocumentoPersistenceJPA.loadAll()).thenReturn(tipodocumentoEntitys);
		
		Tipodocumento tipodocumento1 = tipodocumentoFactoryForTest.newTipodocumento();
		when(tipodocumentoServiceMapper.mapTipodocumentoEntityToTipodocumento(tipodocumentoEntity1)).thenReturn(tipodocumento1);
		Tipodocumento tipodocumento2 = tipodocumentoFactoryForTest.newTipodocumento();
		when(tipodocumentoServiceMapper.mapTipodocumentoEntityToTipodocumento(tipodocumentoEntity2)).thenReturn(tipodocumento2);

		// When
		List<Tipodocumento> tipodocumentosFounds = tipodocumentoService.findAll();

		// Then
		assertTrue(tipodocumento1 == tipodocumentosFounds.get(0));
		assertTrue(tipodocumento2 == tipodocumentosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Tipodocumento tipodocumento = tipodocumentoFactoryForTest.newTipodocumento();

		TipodocumentoEntity tipodocumentoEntity = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		when(tipodocumentoPersistenceJPA.load(tipodocumento.getId())).thenReturn(null);
		
		tipodocumentoEntity = new TipodocumentoEntity();
		tipodocumentoServiceMapper.mapTipodocumentoToTipodocumentoEntity(tipodocumento, tipodocumentoEntity);
		TipodocumentoEntity tipodocumentoEntitySaved = tipodocumentoPersistenceJPA.save(tipodocumentoEntity);
		
		Tipodocumento tipodocumentoSaved = tipodocumentoFactoryForTest.newTipodocumento();
		when(tipodocumentoServiceMapper.mapTipodocumentoEntityToTipodocumento(tipodocumentoEntitySaved)).thenReturn(tipodocumentoSaved);

		// When
		Tipodocumento tipodocumentoResult = tipodocumentoService.create(tipodocumento);

		// Then
		assertTrue(tipodocumentoResult == tipodocumentoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Tipodocumento tipodocumento = tipodocumentoFactoryForTest.newTipodocumento();

		TipodocumentoEntity tipodocumentoEntity = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		when(tipodocumentoPersistenceJPA.load(tipodocumento.getId())).thenReturn(tipodocumentoEntity);

		// When
		Exception exception = null;
		try {
			tipodocumentoService.create(tipodocumento);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Tipodocumento tipodocumento = tipodocumentoFactoryForTest.newTipodocumento();

		TipodocumentoEntity tipodocumentoEntity = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		when(tipodocumentoPersistenceJPA.load(tipodocumento.getId())).thenReturn(tipodocumentoEntity);
		
		TipodocumentoEntity tipodocumentoEntitySaved = tipodocumentoEntityFactoryForTest.newTipodocumentoEntity();
		when(tipodocumentoPersistenceJPA.save(tipodocumentoEntity)).thenReturn(tipodocumentoEntitySaved);
		
		Tipodocumento tipodocumentoSaved = tipodocumentoFactoryForTest.newTipodocumento();
		when(tipodocumentoServiceMapper.mapTipodocumentoEntityToTipodocumento(tipodocumentoEntitySaved)).thenReturn(tipodocumentoSaved);

		// When
		Tipodocumento tipodocumentoResult = tipodocumentoService.update(tipodocumento);

		// Then
		verify(tipodocumentoServiceMapper).mapTipodocumentoToTipodocumentoEntity(tipodocumento, tipodocumentoEntity);
		assertTrue(tipodocumentoResult == tipodocumentoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		tipodocumentoService.delete(id);

		// Then
		verify(tipodocumentoPersistenceJPA).delete(id);
		
	}

}
