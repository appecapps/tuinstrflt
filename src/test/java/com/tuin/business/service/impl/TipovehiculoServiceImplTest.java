/*
 * Created on 28 ago 2017 ( Time 17:51:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Tipovehiculo;
import com.tuin.bean.jpa.TipovehiculoEntity;
import java.util.List;
import com.tuin.business.service.mapping.TipovehiculoServiceMapper;
import com.tuin.persistence.services.jpa.TipovehiculoPersistenceJPA;
import com.tuin.test.TipovehiculoFactoryForTest;
import com.tuin.test.TipovehiculoEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TipovehiculoService
 */
@RunWith(MockitoJUnitRunner.class)
public class TipovehiculoServiceImplTest {

	@InjectMocks
	private TipovehiculoServiceImpl tipovehiculoService;
	@Mock
	private TipovehiculoPersistenceJPA tipovehiculoPersistenceJPA;
	@Mock
	private TipovehiculoServiceMapper tipovehiculoServiceMapper;
	
	private TipovehiculoFactoryForTest tipovehiculoFactoryForTest = new TipovehiculoFactoryForTest();

	private TipovehiculoEntityFactoryForTest tipovehiculoEntityFactoryForTest = new TipovehiculoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		TipovehiculoEntity tipovehiculoEntity = tipovehiculoPersistenceJPA.load(id);
		
		Tipovehiculo tipovehiculo = tipovehiculoFactoryForTest.newTipovehiculo();
		when(tipovehiculoServiceMapper.mapTipovehiculoEntityToTipovehiculo(tipovehiculoEntity)).thenReturn(tipovehiculo);

		// When
		Tipovehiculo tipovehiculoFound = tipovehiculoService.findById(id);

		// Then
		assertEquals(tipovehiculo.getId(),tipovehiculoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TipovehiculoEntity> tipovehiculoEntitys = new ArrayList<TipovehiculoEntity>();
		TipovehiculoEntity tipovehiculoEntity1 = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		tipovehiculoEntitys.add(tipovehiculoEntity1);
		TipovehiculoEntity tipovehiculoEntity2 = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		tipovehiculoEntitys.add(tipovehiculoEntity2);
		when(tipovehiculoPersistenceJPA.loadAll()).thenReturn(tipovehiculoEntitys);
		
		Tipovehiculo tipovehiculo1 = tipovehiculoFactoryForTest.newTipovehiculo();
		when(tipovehiculoServiceMapper.mapTipovehiculoEntityToTipovehiculo(tipovehiculoEntity1)).thenReturn(tipovehiculo1);
		Tipovehiculo tipovehiculo2 = tipovehiculoFactoryForTest.newTipovehiculo();
		when(tipovehiculoServiceMapper.mapTipovehiculoEntityToTipovehiculo(tipovehiculoEntity2)).thenReturn(tipovehiculo2);

		// When
		List<Tipovehiculo> tipovehiculosFounds = tipovehiculoService.findAll();

		// Then
		assertTrue(tipovehiculo1 == tipovehiculosFounds.get(0));
		assertTrue(tipovehiculo2 == tipovehiculosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Tipovehiculo tipovehiculo = tipovehiculoFactoryForTest.newTipovehiculo();

		TipovehiculoEntity tipovehiculoEntity = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		when(tipovehiculoPersistenceJPA.load(tipovehiculo.getId())).thenReturn(null);
		
		tipovehiculoEntity = new TipovehiculoEntity();
		tipovehiculoServiceMapper.mapTipovehiculoToTipovehiculoEntity(tipovehiculo, tipovehiculoEntity);
		TipovehiculoEntity tipovehiculoEntitySaved = tipovehiculoPersistenceJPA.save(tipovehiculoEntity);
		
		Tipovehiculo tipovehiculoSaved = tipovehiculoFactoryForTest.newTipovehiculo();
		when(tipovehiculoServiceMapper.mapTipovehiculoEntityToTipovehiculo(tipovehiculoEntitySaved)).thenReturn(tipovehiculoSaved);

		// When
		Tipovehiculo tipovehiculoResult = tipovehiculoService.create(tipovehiculo);

		// Then
		assertTrue(tipovehiculoResult == tipovehiculoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Tipovehiculo tipovehiculo = tipovehiculoFactoryForTest.newTipovehiculo();

		TipovehiculoEntity tipovehiculoEntity = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		when(tipovehiculoPersistenceJPA.load(tipovehiculo.getId())).thenReturn(tipovehiculoEntity);

		// When
		Exception exception = null;
		try {
			tipovehiculoService.create(tipovehiculo);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Tipovehiculo tipovehiculo = tipovehiculoFactoryForTest.newTipovehiculo();

		TipovehiculoEntity tipovehiculoEntity = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		when(tipovehiculoPersistenceJPA.load(tipovehiculo.getId())).thenReturn(tipovehiculoEntity);
		
		TipovehiculoEntity tipovehiculoEntitySaved = tipovehiculoEntityFactoryForTest.newTipovehiculoEntity();
		when(tipovehiculoPersistenceJPA.save(tipovehiculoEntity)).thenReturn(tipovehiculoEntitySaved);
		
		Tipovehiculo tipovehiculoSaved = tipovehiculoFactoryForTest.newTipovehiculo();
		when(tipovehiculoServiceMapper.mapTipovehiculoEntityToTipovehiculo(tipovehiculoEntitySaved)).thenReturn(tipovehiculoSaved);

		// When
		Tipovehiculo tipovehiculoResult = tipovehiculoService.update(tipovehiculo);

		// Then
		verify(tipovehiculoServiceMapper).mapTipovehiculoToTipovehiculoEntity(tipovehiculo, tipovehiculoEntity);
		assertTrue(tipovehiculoResult == tipovehiculoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		tipovehiculoService.delete(id);

		// Then
		verify(tipovehiculoPersistenceJPA).delete(id);
		
	}

}
