/*
 * Created on 28 ago 2017 ( Time 17:51:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Variables;
import com.tuin.bean.jpa.VariablesEntity;
import com.tuin.business.service.mapping.VariablesServiceMapper;
import com.tuin.persistence.services.jpa.VariablesPersistenceJPA;
import com.tuin.test.VariablesFactoryForTest;
import com.tuin.test.VariablesEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of VariablesService
 */
@RunWith(MockitoJUnitRunner.class)
public class VariablesServiceImplTest {

	@InjectMocks
	private VariablesServiceImpl variablesService;
	@Mock
	private VariablesPersistenceJPA variablesPersistenceJPA;
	@Mock
	private VariablesServiceMapper variablesServiceMapper;
	
	private VariablesFactoryForTest variablesFactoryForTest = new VariablesFactoryForTest();

	private VariablesEntityFactoryForTest variablesEntityFactoryForTest = new VariablesEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		VariablesEntity variablesEntity = variablesPersistenceJPA.load(id);
		
		Variables variables = variablesFactoryForTest.newVariables();
		when(variablesServiceMapper.mapVariablesEntityToVariables(variablesEntity)).thenReturn(variables);

		// When
		Variables variablesFound = variablesService.findById(id);

		// Then
		assertEquals(variables.getId(),variablesFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<VariablesEntity> variablesEntitys = new ArrayList<VariablesEntity>();
		VariablesEntity variablesEntity1 = variablesEntityFactoryForTest.newVariablesEntity();
		variablesEntitys.add(variablesEntity1);
		VariablesEntity variablesEntity2 = variablesEntityFactoryForTest.newVariablesEntity();
		variablesEntitys.add(variablesEntity2);
		when(variablesPersistenceJPA.loadAll()).thenReturn(variablesEntitys);
		
		Variables variables1 = variablesFactoryForTest.newVariables();
		when(variablesServiceMapper.mapVariablesEntityToVariables(variablesEntity1)).thenReturn(variables1);
		Variables variables2 = variablesFactoryForTest.newVariables();
		when(variablesServiceMapper.mapVariablesEntityToVariables(variablesEntity2)).thenReturn(variables2);

		// When
		List<Variables> variablessFounds = variablesService.findAll();

		// Then
		assertTrue(variables1 == variablessFounds.get(0));
		assertTrue(variables2 == variablessFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Variables variables = variablesFactoryForTest.newVariables();

		VariablesEntity variablesEntity = variablesEntityFactoryForTest.newVariablesEntity();
		when(variablesPersistenceJPA.load(variables.getId())).thenReturn(null);
		
		variablesEntity = new VariablesEntity();
		variablesServiceMapper.mapVariablesToVariablesEntity(variables, variablesEntity);
		VariablesEntity variablesEntitySaved = variablesPersistenceJPA.save(variablesEntity);
		
		Variables variablesSaved = variablesFactoryForTest.newVariables();
		when(variablesServiceMapper.mapVariablesEntityToVariables(variablesEntitySaved)).thenReturn(variablesSaved);

		// When
		Variables variablesResult = variablesService.create(variables);

		// Then
		assertTrue(variablesResult == variablesSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Variables variables = variablesFactoryForTest.newVariables();

		VariablesEntity variablesEntity = variablesEntityFactoryForTest.newVariablesEntity();
		when(variablesPersistenceJPA.load(variables.getId())).thenReturn(variablesEntity);

		// When
		Exception exception = null;
		try {
			variablesService.create(variables);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Variables variables = variablesFactoryForTest.newVariables();

		VariablesEntity variablesEntity = variablesEntityFactoryForTest.newVariablesEntity();
		when(variablesPersistenceJPA.load(variables.getId())).thenReturn(variablesEntity);
		
		VariablesEntity variablesEntitySaved = variablesEntityFactoryForTest.newVariablesEntity();
		when(variablesPersistenceJPA.save(variablesEntity)).thenReturn(variablesEntitySaved);
		
		Variables variablesSaved = variablesFactoryForTest.newVariables();
		when(variablesServiceMapper.mapVariablesEntityToVariables(variablesEntitySaved)).thenReturn(variablesSaved);

		// When
		Variables variablesResult = variablesService.update(variables);

		// Then
		verify(variablesServiceMapper).mapVariablesToVariablesEntity(variables, variablesEntity);
		assertTrue(variablesResult == variablesSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		variablesService.delete(id);

		// Then
		verify(variablesPersistenceJPA).delete(id);
		
	}

}
