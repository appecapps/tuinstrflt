/*
 * Created on 28 ago 2017 ( Time 17:51:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Vehiculoservicio;
import com.tuin.bean.jpa.VehiculoservicioEntity;
import java.util.List;
import com.tuin.business.service.mapping.VehiculoservicioServiceMapper;
import com.tuin.persistence.services.jpa.VehiculoservicioPersistenceJPA;
import com.tuin.test.VehiculoservicioFactoryForTest;
import com.tuin.test.VehiculoservicioEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of VehiculoservicioService
 */
@RunWith(MockitoJUnitRunner.class)
public class VehiculoservicioServiceImplTest {

	@InjectMocks
	private VehiculoservicioServiceImpl vehiculoservicioService;
	@Mock
	private VehiculoservicioPersistenceJPA vehiculoservicioPersistenceJPA;
	@Mock
	private VehiculoservicioServiceMapper vehiculoservicioServiceMapper;
	
	private VehiculoservicioFactoryForTest vehiculoservicioFactoryForTest = new VehiculoservicioFactoryForTest();

	private VehiculoservicioEntityFactoryForTest vehiculoservicioEntityFactoryForTest = new VehiculoservicioEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		VehiculoservicioEntity vehiculoservicioEntity = vehiculoservicioPersistenceJPA.load(id);
		
		Vehiculoservicio vehiculoservicio = vehiculoservicioFactoryForTest.newVehiculoservicio();
		when(vehiculoservicioServiceMapper.mapVehiculoservicioEntityToVehiculoservicio(vehiculoservicioEntity)).thenReturn(vehiculoservicio);

		// When
		Vehiculoservicio vehiculoservicioFound = vehiculoservicioService.findById(id);

		// Then
		assertEquals(vehiculoservicio.getId(),vehiculoservicioFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<VehiculoservicioEntity> vehiculoservicioEntitys = new ArrayList<VehiculoservicioEntity>();
		VehiculoservicioEntity vehiculoservicioEntity1 = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		vehiculoservicioEntitys.add(vehiculoservicioEntity1);
		VehiculoservicioEntity vehiculoservicioEntity2 = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		vehiculoservicioEntitys.add(vehiculoservicioEntity2);
		when(vehiculoservicioPersistenceJPA.loadAll()).thenReturn(vehiculoservicioEntitys);
		
		Vehiculoservicio vehiculoservicio1 = vehiculoservicioFactoryForTest.newVehiculoservicio();
		when(vehiculoservicioServiceMapper.mapVehiculoservicioEntityToVehiculoservicio(vehiculoservicioEntity1)).thenReturn(vehiculoservicio1);
		Vehiculoservicio vehiculoservicio2 = vehiculoservicioFactoryForTest.newVehiculoservicio();
		when(vehiculoservicioServiceMapper.mapVehiculoservicioEntityToVehiculoservicio(vehiculoservicioEntity2)).thenReturn(vehiculoservicio2);

		// When
		List<Vehiculoservicio> vehiculoserviciosFounds = vehiculoservicioService.findAll();

		// Then
		assertTrue(vehiculoservicio1 == vehiculoserviciosFounds.get(0));
		assertTrue(vehiculoservicio2 == vehiculoserviciosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Vehiculoservicio vehiculoservicio = vehiculoservicioFactoryForTest.newVehiculoservicio();

		VehiculoservicioEntity vehiculoservicioEntity = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		when(vehiculoservicioPersistenceJPA.load(vehiculoservicio.getId())).thenReturn(null);
		
		vehiculoservicioEntity = new VehiculoservicioEntity();
		vehiculoservicioServiceMapper.mapVehiculoservicioToVehiculoservicioEntity(vehiculoservicio, vehiculoservicioEntity);
		VehiculoservicioEntity vehiculoservicioEntitySaved = vehiculoservicioPersistenceJPA.save(vehiculoservicioEntity);
		
		Vehiculoservicio vehiculoservicioSaved = vehiculoservicioFactoryForTest.newVehiculoservicio();
		when(vehiculoservicioServiceMapper.mapVehiculoservicioEntityToVehiculoservicio(vehiculoservicioEntitySaved)).thenReturn(vehiculoservicioSaved);

		// When
		Vehiculoservicio vehiculoservicioResult = vehiculoservicioService.create(vehiculoservicio);

		// Then
		assertTrue(vehiculoservicioResult == vehiculoservicioSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Vehiculoservicio vehiculoservicio = vehiculoservicioFactoryForTest.newVehiculoservicio();

		VehiculoservicioEntity vehiculoservicioEntity = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		when(vehiculoservicioPersistenceJPA.load(vehiculoservicio.getId())).thenReturn(vehiculoservicioEntity);

		// When
		Exception exception = null;
		try {
			vehiculoservicioService.create(vehiculoservicio);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Vehiculoservicio vehiculoservicio = vehiculoservicioFactoryForTest.newVehiculoservicio();

		VehiculoservicioEntity vehiculoservicioEntity = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		when(vehiculoservicioPersistenceJPA.load(vehiculoservicio.getId())).thenReturn(vehiculoservicioEntity);
		
		VehiculoservicioEntity vehiculoservicioEntitySaved = vehiculoservicioEntityFactoryForTest.newVehiculoservicioEntity();
		when(vehiculoservicioPersistenceJPA.save(vehiculoservicioEntity)).thenReturn(vehiculoservicioEntitySaved);
		
		Vehiculoservicio vehiculoservicioSaved = vehiculoservicioFactoryForTest.newVehiculoservicio();
		when(vehiculoservicioServiceMapper.mapVehiculoservicioEntityToVehiculoservicio(vehiculoservicioEntitySaved)).thenReturn(vehiculoservicioSaved);

		// When
		Vehiculoservicio vehiculoservicioResult = vehiculoservicioService.update(vehiculoservicio);

		// Then
		verify(vehiculoservicioServiceMapper).mapVehiculoservicioToVehiculoservicioEntity(vehiculoservicio, vehiculoservicioEntity);
		assertTrue(vehiculoservicioResult == vehiculoservicioSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		vehiculoservicioService.delete(id);

		// Then
		verify(vehiculoservicioPersistenceJPA).delete(id);
		
	}

}
