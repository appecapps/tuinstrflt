/*
 * Created on 28 ago 2017 ( Time 17:51:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.tuin.bean.Viaje;
import com.tuin.bean.jpa.ViajeEntity;
import java.util.List;
import com.tuin.business.service.mapping.ViajeServiceMapper;
import com.tuin.persistence.services.jpa.ViajePersistenceJPA;
import com.tuin.test.ViajeFactoryForTest;
import com.tuin.test.ViajeEntityFactoryForTest;
import com.tuin.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ViajeService
 */
@RunWith(MockitoJUnitRunner.class)
public class ViajeServiceImplTest {

	@InjectMocks
	private ViajeServiceImpl viajeService;
	@Mock
	private ViajePersistenceJPA viajePersistenceJPA;
	@Mock
	private ViajeServiceMapper viajeServiceMapper;
	
	private ViajeFactoryForTest viajeFactoryForTest = new ViajeFactoryForTest();

	private ViajeEntityFactoryForTest viajeEntityFactoryForTest = new ViajeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ViajeEntity viajeEntity = viajePersistenceJPA.load(id);
		
		Viaje viaje = viajeFactoryForTest.newViaje();
		when(viajeServiceMapper.mapViajeEntityToViaje(viajeEntity)).thenReturn(viaje);

		// When
		Viaje viajeFound = viajeService.findById(id);

		// Then
		assertEquals(viaje.getId(),viajeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ViajeEntity> viajeEntitys = new ArrayList<ViajeEntity>();
		ViajeEntity viajeEntity1 = viajeEntityFactoryForTest.newViajeEntity();
		viajeEntitys.add(viajeEntity1);
		ViajeEntity viajeEntity2 = viajeEntityFactoryForTest.newViajeEntity();
		viajeEntitys.add(viajeEntity2);
		when(viajePersistenceJPA.loadAll()).thenReturn(viajeEntitys);
		
		Viaje viaje1 = viajeFactoryForTest.newViaje();
		when(viajeServiceMapper.mapViajeEntityToViaje(viajeEntity1)).thenReturn(viaje1);
		Viaje viaje2 = viajeFactoryForTest.newViaje();
		when(viajeServiceMapper.mapViajeEntityToViaje(viajeEntity2)).thenReturn(viaje2);

		// When
		List<Viaje> viajesFounds = viajeService.findAll();

		// Then
		assertTrue(viaje1 == viajesFounds.get(0));
		assertTrue(viaje2 == viajesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Viaje viaje = viajeFactoryForTest.newViaje();

		ViajeEntity viajeEntity = viajeEntityFactoryForTest.newViajeEntity();
		when(viajePersistenceJPA.load(viaje.getId())).thenReturn(null);
		
		viajeEntity = new ViajeEntity();
		viajeServiceMapper.mapViajeToViajeEntity(viaje, viajeEntity);
		ViajeEntity viajeEntitySaved = viajePersistenceJPA.save(viajeEntity);
		
		Viaje viajeSaved = viajeFactoryForTest.newViaje();
		when(viajeServiceMapper.mapViajeEntityToViaje(viajeEntitySaved)).thenReturn(viajeSaved);

		// When
		Viaje viajeResult = viajeService.create(viaje);

		// Then
		assertTrue(viajeResult == viajeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Viaje viaje = viajeFactoryForTest.newViaje();

		ViajeEntity viajeEntity = viajeEntityFactoryForTest.newViajeEntity();
		when(viajePersistenceJPA.load(viaje.getId())).thenReturn(viajeEntity);

		// When
		Exception exception = null;
		try {
			viajeService.create(viaje);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Viaje viaje = viajeFactoryForTest.newViaje();

		ViajeEntity viajeEntity = viajeEntityFactoryForTest.newViajeEntity();
		when(viajePersistenceJPA.load(viaje.getId())).thenReturn(viajeEntity);
		
		ViajeEntity viajeEntitySaved = viajeEntityFactoryForTest.newViajeEntity();
		when(viajePersistenceJPA.save(viajeEntity)).thenReturn(viajeEntitySaved);
		
		Viaje viajeSaved = viajeFactoryForTest.newViaje();
		when(viajeServiceMapper.mapViajeEntityToViaje(viajeEntitySaved)).thenReturn(viajeSaved);

		// When
		Viaje viajeResult = viajeService.update(viaje);

		// Then
		verify(viajeServiceMapper).mapViajeToViajeEntity(viaje, viajeEntity);
		assertTrue(viajeResult == viajeSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		viajeService.delete(id);

		// Then
		verify(viajePersistenceJPA).delete(id);
		
	}

}
