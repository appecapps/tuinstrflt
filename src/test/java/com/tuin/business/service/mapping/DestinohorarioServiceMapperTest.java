/*
 * Created on 28 ago 2017 ( Time 17:51:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.tuin.bean.Destinohorario;
import com.tuin.bean.jpa.DestinohorarioEntity;
import com.tuin.bean.jpa.CiudadEntity;
import com.tuin.bean.jpa.HorarioEntity;
import com.tuin.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class DestinohorarioServiceMapperTest {

	private DestinohorarioServiceMapper destinohorarioServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		destinohorarioServiceMapper = new DestinohorarioServiceMapper();
		destinohorarioServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'DestinohorarioEntity' to 'Destinohorario'
	 * @param destinohorarioEntity
	 */
	@Test
	public void testMapDestinohorarioEntityToDestinohorario() {
		// Given
		DestinohorarioEntity destinohorarioEntity = new DestinohorarioEntity();
		destinohorarioEntity.setCosto(mockValues.nextBigDecimal());
		destinohorarioEntity.setMinimopasajeros(mockValues.nextInteger());
		destinohorarioEntity.setAutomatico(mockValues.nextByte());
		destinohorarioEntity.setCiudad(new CiudadEntity());
		destinohorarioEntity.getCiudad().setId(mockValues.nextLong());
		destinohorarioEntity.setHorario(new HorarioEntity());
		destinohorarioEntity.getHorario().setId(mockValues.nextLong());
		
		// When
		Destinohorario destinohorario = destinohorarioServiceMapper.mapDestinohorarioEntityToDestinohorario(destinohorarioEntity);
		
		// Then
		assertEquals(destinohorarioEntity.getCosto(), destinohorario.getCosto());
		assertEquals(destinohorarioEntity.getMinimopasajeros(), destinohorario.getMinimopasajeros());
		assertEquals(destinohorarioEntity.getAutomatico(), destinohorario.getAutomatico());
		assertEquals(destinohorarioEntity.getCiudad().getId(), destinohorario.getDestinoid());
		assertEquals(destinohorarioEntity.getHorario().getId(), destinohorario.getHorarioid());
	}
	
	/**
	 * Test : Mapping from 'Destinohorario' to 'DestinohorarioEntity'
	 */
	@Test
	public void testMapDestinohorarioToDestinohorarioEntity() {
		// Given
		Destinohorario destinohorario = new Destinohorario();
		destinohorario.setCosto(mockValues.nextBigDecimal());
		destinohorario.setMinimopasajeros(mockValues.nextInteger());
		destinohorario.setAutomatico(mockValues.nextByte());
		destinohorario.setDestinoid(mockValues.nextLong());
		destinohorario.setHorarioid(mockValues.nextLong());

		DestinohorarioEntity destinohorarioEntity = new DestinohorarioEntity();
		
		// When
		destinohorarioServiceMapper.mapDestinohorarioToDestinohorarioEntity(destinohorario, destinohorarioEntity);
		
		// Then
		assertEquals(destinohorario.getCosto(), destinohorarioEntity.getCosto());
		assertEquals(destinohorario.getMinimopasajeros(), destinohorarioEntity.getMinimopasajeros());
		assertEquals(destinohorario.getAutomatico(), destinohorarioEntity.getAutomatico());
		assertEquals(destinohorario.getDestinoid(), destinohorarioEntity.getCiudad().getId());
		assertEquals(destinohorario.getHorarioid(), destinohorarioEntity.getHorario().getId());
	}

}