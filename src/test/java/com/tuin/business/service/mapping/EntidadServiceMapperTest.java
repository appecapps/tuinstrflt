/*
 * Created on 28 ago 2017 ( Time 17:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.tuin.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.tuin.bean.Entidad;
import com.tuin.bean.jpa.EntidadEntity;
import com.tuin.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class EntidadServiceMapperTest {

	private EntidadServiceMapper entidadServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		entidadServiceMapper = new EntidadServiceMapper();
		entidadServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'EntidadEntity' to 'Entidad'
	 * @param entidadEntity
	 */
	@Test
	public void testMapEntidadEntityToEntidad() {
		// Given
		EntidadEntity entidadEntity = new EntidadEntity();
		entidadEntity.setIdentificacion(mockValues.nextString(20));
		entidadEntity.setNombre(mockValues.nextString(200));
		entidadEntity.setApellido(mockValues.nextString(200));
		entidadEntity.setCorreo(mockValues.nextString(45));
		entidadEntity.setPassword(mockValues.nextString(45));
		entidadEntity.setActivo(mockValues.nextByte());
		entidadEntity.setWeb(mockValues.nextByte());
		
		// When
		Entidad entidad = entidadServiceMapper.mapEntidadEntityToEntidad(entidadEntity);
		
		// Then
		assertEquals(entidadEntity.getIdentificacion(), entidad.getIdentificacion());
		assertEquals(entidadEntity.getNombre(), entidad.getNombre());
		assertEquals(entidadEntity.getApellido(), entidad.getApellido());
		assertEquals(entidadEntity.getCorreo(), entidad.getCorreo());
		assertEquals(entidadEntity.getPassword(), entidad.getPassword());
		assertEquals(entidadEntity.getActivo(), entidad.getActivo());
		assertEquals(entidadEntity.getWeb(), entidad.getWeb());
	}
	
	/**
	 * Test : Mapping from 'Entidad' to 'EntidadEntity'
	 */
	@Test
	public void testMapEntidadToEntidadEntity() {
		// Given
		Entidad entidad = new Entidad();
		entidad.setIdentificacion(mockValues.nextString(20));
		entidad.setNombre(mockValues.nextString(200));
		entidad.setApellido(mockValues.nextString(200));
		entidad.setCorreo(mockValues.nextString(45));
		entidad.setPassword(mockValues.nextString(45));
		entidad.setActivo(mockValues.nextByte());
		entidad.setWeb(mockValues.nextByte());

		EntidadEntity entidadEntity = new EntidadEntity();
		
		// When
		entidadServiceMapper.mapEntidadToEntidadEntity(entidad, entidadEntity);
		
		// Then
		assertEquals(entidad.getIdentificacion(), entidadEntity.getIdentificacion());
		assertEquals(entidad.getNombre(), entidadEntity.getNombre());
		assertEquals(entidad.getApellido(), entidadEntity.getApellido());
		assertEquals(entidad.getCorreo(), entidadEntity.getCorreo());
		assertEquals(entidad.getPassword(), entidadEntity.getPassword());
		assertEquals(entidad.getActivo(), entidadEntity.getActivo());
		assertEquals(entidad.getWeb(), entidadEntity.getWeb());
	}

}